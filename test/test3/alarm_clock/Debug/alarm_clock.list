
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c48  08005c48  00007090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c48  08005c48  00006c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c50  08005c50  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c54  08005c54  00006c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005c58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000090  08005ce8  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005ce8  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ea  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002388  00000000  00000000  000179aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00019d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf1  00000000  00000000  0001ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc8  00000000  00000000  0001ba91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f28  00000000  00000000  00033659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d7e  00000000  00000000  00046581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d92ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  000d9344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000de2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b80 	.word	0x08005b80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08005b80 	.word	0x08005b80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 80005b4:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <LCD_init+0x6c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 80005ba:	2032      	movs	r0, #50	@ 0x32
 80005bc:	f001 f80c 	bl	80015d8 <HAL_Delay>
	LCD_cmdMode();
 80005c0:	f000 f89a 	bl	80006f8 <LCD_cmdMode>
	LCD_writeMode();
 80005c4:	f000 f8b8 	bl	8000738 <LCD_writeMode>
	LCD_sendData(0x30);
 80005c8:	2030      	movs	r0, #48	@ 0x30
 80005ca:	f000 f849 	bl	8000660 <LCD_sendData>
	HAL_Delay(5);
 80005ce:	2005      	movs	r0, #5
 80005d0:	f001 f802 	bl	80015d8 <HAL_Delay>
	LCD_sendData(0x30);
 80005d4:	2030      	movs	r0, #48	@ 0x30
 80005d6:	f000 f843 	bl	8000660 <LCD_sendData>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fffc 	bl	80015d8 <HAL_Delay>
	LCD_sendData(0x30);
 80005e0:	2030      	movs	r0, #48	@ 0x30
 80005e2:	f000 f83d 	bl	8000660 <LCD_sendData>
	LCD_sendData(0x20);
 80005e6:	2020      	movs	r0, #32
 80005e8:	f000 f83a 	bl	8000660 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 80005ec:	2028      	movs	r0, #40	@ 0x28
 80005ee:	f000 f85f 	bl	80006b0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 80005f2:	2008      	movs	r0, #8
 80005f4:	f000 f85c 	bl	80006b0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f859 	bl	80006b0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 80005fe:	2006      	movs	r0, #6
 8000600:	f000 f856 	bl	80006b0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000604:	200c      	movs	r0, #12
 8000606:	f000 f853 	bl	80006b0 <LCD_sendByte>
	LCD_backLightOn();
 800060a:	f000 f865 	bl	80006d8 <LCD_backLightOn>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000b0 	.word	0x200000b0

0800061c <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 8000626:	f000 f867 	bl	80006f8 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 800062a:	f000 f885 	bl	8000738 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f83d 	bl	80006b0 <LCD_sendByte>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 8000648:	f000 f866 	bl	8000718 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 800064c:	f000 f874 	bl	8000738 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f82c 	bl	80006b0 <LCD_sendByte>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 800066a:	f000 f875 	bl	8000758 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 800066e:	2002      	movs	r0, #2
 8000670:	f000 ffb2 	bl	80015d8 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <LCD_sendData+0x4c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b25a      	sxtb	r2, r3
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	b25b      	sxtb	r3, r3
 800068a:	4313      	orrs	r3, r2
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <LCD_sendData+0x4c>)
 8000692:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8000694:	f000 f880 	bl	8000798 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 8000698:	f000 f86e 	bl	8000778 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 800069c:	2002      	movs	r0, #2
 800069e:	f000 ff9b 	bl	80015d8 <HAL_Delay>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000ac 	.word	0x200000ac

080006b0 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffcf 	bl	8000660 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffc8 	bl	8000660 <LCD_sendData>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_backLightOn>:
void LCD_backLightOn() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <LCD_backLightOn+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <LCD_backLightOn+0x1c>)
 80006e8:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80006ea:	f000 f855 	bl	8000798 <LCD_sendDataToInterface>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000ac 	.word	0x200000ac

080006f8 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <LCD_cmdMode+0x1c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <LCD_cmdMode+0x1c>)
 8000708:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800070a:	f000 f845 	bl	8000798 <LCD_sendDataToInterface>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000ac 	.word	0x200000ac

08000718 <LCD_charMode>:

void LCD_charMode() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <LCD_charMode+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <LCD_charMode+0x1c>)
 8000728:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800072a:	f000 f835 	bl	8000798 <LCD_sendDataToInterface>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000ac 	.word	0x200000ac

08000738 <LCD_writeMode>:

void LCD_writeMode() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <LCD_writeMode+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f023 0302 	bic.w	r3, r3, #2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <LCD_writeMode+0x1c>)
 8000748:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800074a:	f000 f825 	bl	8000798 <LCD_sendDataToInterface>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000ac 	.word	0x200000ac

08000758 <LCD_enableHigh>:

void LCD_enableHigh() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <LCD_enableHigh+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <LCD_enableHigh+0x1c>)
 8000768:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800076a:	f000 f815 	bl	8000798 <LCD_sendDataToInterface>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000ac 	.word	0x200000ac

08000778 <LCD_enableLow>:

void LCD_enableLow() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <LCD_enableLow+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f023 0304 	bic.w	r3, r3, #4
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <LCD_enableLow+0x1c>)
 8000788:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 800078a:	f000 f805 	bl	8000798 <LCD_sendDataToInterface>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000ac 	.word	0x200000ac

08000798 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <LCD_sendDataToInterface+0x20>)
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	2364      	movs	r3, #100	@ 0x64
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <LCD_sendDataToInterface+0x24>)
 80007aa:	214e      	movs	r1, #78	@ 0x4e
 80007ac:	f001 fbd6 	bl	8001f5c <HAL_I2C_Master_Transmit>
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	200000ac 	.word	0x200000ac

080007c0 <LCD_writeString>:

void LCD_writeString(char *str) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e009      	b.n	80007e2 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff31 	bl	800063e <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1ef      	bne.n	80007ce <LCD_writeString+0xe>
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	019b      	lsls	r3, r3, #6
 800081c:	b2da      	uxtb	r2, r3
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	4413      	add	r3, r2
 8000822:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	3b80      	subs	r3, #128	@ 0x80
 8000828:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fef5 	bl	800061c <LCD_writeCmdData>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	603a      	str	r2, [r7, #0]
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800084a:	79ba      	ldrb	r2, [r7, #6]
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffd1 	bl	80007f8 <LCD_gotoXY>
	LCD_writeString(str);
 8000856:	6838      	ldr	r0, [r7, #0]
 8000858:	f7ff ffb2 	bl	80007c0 <LCD_writeString>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086a:	f000 fe43 	bl	80014f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800086e:	f000 f85f 	bl	8000930 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000872:	f000 f96d 	bl	8000b50 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000876:	f000 f941 	bl	8000afc <MX_USART2_UART_Init>
	MX_TIM3_Init();
 800087a:	f000 f8f1 	bl	8000a60 <MX_TIM3_Init>
	MX_I2C1_Init();
 800087e:	f000 f8c1 	bl	8000a04 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000882:	481f      	ldr	r0, [pc, #124]	@ (8000900 <main+0x9c>)
 8000884:	f002 fbac 	bl	8002fe0 <HAL_TIM_Base_Start_IT>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <main+0x2e>
		Error_Handler();
 800088e:	f000 fc1f 	bl	80010d0 <Error_Handler>

	HAL_UART_Receive_IT(&huart2, &rx2char, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	491b      	ldr	r1, [pc, #108]	@ (8000904 <main+0xa0>)
 8000896:	481c      	ldr	r0, [pc, #112]	@ (8000908 <main+0xa4>)
 8000898:	f003 f861 	bl	800395e <HAL_UART_Receive_IT>

	LCD_init(&hi2c1);
 800089c:	481b      	ldr	r0, [pc, #108]	@ (800090c <main+0xa8>)
 800089e:	f7ff fe85 	bl	80005ac <LCD_init>

	char buff[30];

	printf("start main()\r\n");
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <main+0xac>)
 80008a4:	f004 f920 	bl	8004ae8 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		clock_set();
 80008a8:	f000 faaa 	bl	8000e00 <clock_set>
		alarm_buzzer();
 80008ac:	f000 fbd8 	bl	8001060 <alarm_buzzer>
		if (time3SecFlag) {
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <main+0xb0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0f7      	beq.n	80008a8 <main+0x44>
			time3SecFlag = 0;
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <main+0xb0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]

			if (time3SecCnt % 10 == 0) {
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <main+0xb4>)
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	4b16      	ldr	r3, [pc, #88]	@ (800091c <main+0xb8>)
 80008c4:	fba3 2301 	umull	r2, r3, r3, r1
 80008c8:	08da      	lsrs	r2, r3, #3
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	1aca      	subs	r2, r1, r3
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d1e7      	bne.n	80008a8 <main+0x44>

				clock_cal();
 80008d8:	f000 fa4a 	bl	8000d70 <clock_cal>
				clock_display();
 80008dc:	f000 fa04 	bl	8000ce8 <clock_display>
				printf("%s\r\n", line1);
 80008e0:	490f      	ldr	r1, [pc, #60]	@ (8000920 <main+0xbc>)
 80008e2:	4810      	ldr	r0, [pc, #64]	@ (8000924 <main+0xc0>)
 80008e4:	f004 f898 	bl	8004a18 <iprintf>
				printf("%s\r\n", line2);
 80008e8:	490f      	ldr	r1, [pc, #60]	@ (8000928 <main+0xc4>)
 80008ea:	480e      	ldr	r0, [pc, #56]	@ (8000924 <main+0xc0>)
 80008ec:	f004 f894 	bl	8004a18 <iprintf>
				printf("\r\n");
 80008f0:	480e      	ldr	r0, [pc, #56]	@ (800092c <main+0xc8>)
 80008f2:	f004 f8f9 	bl	8004ae8 <puts>
				printf("\r\n");
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <main+0xc8>)
 80008f8:	f004 f8f6 	bl	8004ae8 <puts>
		clock_set();
 80008fc:	e7d4      	b.n	80008a8 <main+0x44>
 80008fe:	bf00      	nop
 8000900:	20000108 	.word	0x20000108
 8000904:	200001e4 	.word	0x200001e4
 8000908:	20000150 	.word	0x20000150
 800090c:	200000b4 	.word	0x200000b4
 8000910:	08005b98 	.word	0x08005b98
 8000914:	200001e8 	.word	0x200001e8
 8000918:	200001ec 	.word	0x200001ec
 800091c:	cccccccd 	.word	0xcccccccd
 8000920:	20000198 	.word	0x20000198
 8000924:	08005ba8 	.word	0x08005ba8
 8000928:	200001a8 	.word	0x200001a8
 800092c:	08005bb0 	.word	0x08005bb0

08000930 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 f9d4 	bl	8004cec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009a0:	2310      	movs	r3, #16
 80009a2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009a8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fe2a 	bl	8002610 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x96>
		Error_Handler();
 80009c2:	f000 fb85 	bl	80010d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2102      	movs	r1, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 f88c 	bl	8002b00 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xc2>
		Error_Handler();
 80009ee:	f000 fb6f 	bl	80010d0 <Error_Handler>
	}
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	@ 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <MX_I2C1_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a10:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x58>)
 8000a12:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a26:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_I2C1_Init+0x50>)
 8000a42:	f001 f947 	bl	8001cd4 <HAL_I2C_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000a4c:	f000 fb40 	bl	80010d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000b4 	.word	0x200000b4
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <MX_TIM3_Init+0x98>)
 8000a80:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8400 - 1;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a84:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a88:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a96:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000aa4:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000aa6:	f002 fa4b 	bl	8002f40 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x54>
		Error_Handler();
 8000ab0:	f000 fb0e 	bl	80010d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000ac2:	f002 fbdf 	bl	8003284 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x70>
		Error_Handler();
 8000acc:	f000 fb00 	bl	80010d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_TIM3_Init+0x94>)
 8000ade:	f002 fde1 	bl	80036a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000ae8:	f000 faf2 	bl	80010d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000108 	.word	0x20000108
 8000af8:	40000400 	.word	0x40000400

08000afc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <MX_USART2_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f002 fe38 	bl	80037a8 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000b3e:	f000 fac7 	bl	80010d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000150 	.word	0x20000150
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a36      	ldr	r2, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0x114>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, TEST_LED_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2130      	movs	r1, #48	@ 0x30
 8000bda:	4823      	ldr	r0, [pc, #140]	@ (8000c68 <MX_GPIO_Init+0x118>)
 8000bdc:	f001 f860 	bl	8001ca0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be6:	4821      	ldr	r0, [pc, #132]	@ (8000c6c <MX_GPIO_Init+0x11c>)
 8000be8:	f001 f85a 	bl	8001ca0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <MX_GPIO_Init+0x11c>)
 8000c04:	f000 feb0 	bl	8001968 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
	GPIO_InitStruct.Pin = BUTTON0_Pin | BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4814      	ldr	r0, [pc, #80]	@ (8000c6c <MX_GPIO_Init+0x11c>)
 8000c1c:	f000 fea4 	bl	8001968 <HAL_GPIO_Init>

	/*Configure GPIO pins : TEST_LED_Pin LD2_Pin */
	GPIO_InitStruct.Pin = TEST_LED_Pin | LD2_Pin;
 8000c20:	2330      	movs	r3, #48	@ 0x30
 8000c22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_GPIO_Init+0x118>)
 8000c38:	f000 fe96 	bl	8001968 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUZZER_Pin */
	GPIO_InitStruct.Pin = BUZZER_Pin;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_GPIO_Init+0x11c>)
 8000c56:	f000 fe87 	bl	8001968 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020800 	.word	0x40020800

08000c70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d107      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x22>
		time3SecFlag = 1; // 100ms마다
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
		time3SecCnt++;	  // 100ms 마다
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c90:	6013      	str	r3, [r2, #0]
	}

	if (buzzer_flag == 1) {
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d104      	bne.n	8000ca4 <HAL_TIM_PeriodElapsedCallback+0x34>
		buzzer_counter++;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ca2:	6013      	str	r3, [r2, #0]
	}
	if (buzzer_counter >= 600) {
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000cac:	db0b      	blt.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb4:	480b      	ldr	r0, [pc, #44]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cb6:	f000 fff3 	bl	8001ca0 <HAL_GPIO_WritePin>
		buzzer_flag = 0;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
		buzzer_counter = 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	200001e8 	.word	0x200001e8
 8000cd8:	200001ec 	.word	0x200001ec
 8000cdc:	200001bc 	.word	0x200001bc
 8000ce0:	200001c0 	.word	0x200001c0
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <clock_display>:

void clock_display() {
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af04      	add	r7, sp, #16

	sprintf(line1, "T %02d:%02d:%02d %cM %c", current_time.hour,
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <clock_display+0x70>)
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <clock_display+0x70>)
 8000cf4:	6899      	ldr	r1, [r3, #8]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <clock_display+0x70>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
			current_time.min, current_time.sec, current_time.apm,
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <clock_display+0x70>)
 8000cfc:	7c00      	ldrb	r0, [r0, #16]
	sprintf(line1, "T %02d:%02d:%02d %cM %c", current_time.hour,
 8000cfe:	4604      	mov	r4, r0
			current_time.mode);
 8000d00:	4815      	ldr	r0, [pc, #84]	@ (8000d58 <clock_display+0x70>)
 8000d02:	7c40      	ldrb	r0, [r0, #17]
	sprintf(line1, "T %02d:%02d:%02d %cM %c", current_time.hour,
 8000d04:	9002      	str	r0, [sp, #8]
 8000d06:	9401      	str	r4, [sp, #4]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4913      	ldr	r1, [pc, #76]	@ (8000d5c <clock_display+0x74>)
 8000d0e:	4814      	ldr	r0, [pc, #80]	@ (8000d60 <clock_display+0x78>)
 8000d10:	f003 fef2 	bl	8004af8 <siprintf>

	sprintf(line2, "A %02d:%02d:%02d %cM %c", alarm_time.hour, alarm_time.min,
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <clock_display+0x7c>)
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <clock_display+0x7c>)
 8000d1a:	6899      	ldr	r1, [r3, #8]
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <clock_display+0x7c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
			alarm_time.sec, alarm_time.apm, alarm_time.mode);
 8000d20:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <clock_display+0x7c>)
 8000d22:	7c00      	ldrb	r0, [r0, #16]
	sprintf(line2, "A %02d:%02d:%02d %cM %c", alarm_time.hour, alarm_time.min,
 8000d24:	4604      	mov	r4, r0
			alarm_time.sec, alarm_time.apm, alarm_time.mode);
 8000d26:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <clock_display+0x7c>)
 8000d28:	7c40      	ldrb	r0, [r0, #17]
	sprintf(line2, "A %02d:%02d:%02d %cM %c", alarm_time.hour, alarm_time.min,
 8000d2a:	9002      	str	r0, [sp, #8]
 8000d2c:	9401      	str	r4, [sp, #4]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	460b      	mov	r3, r1
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <clock_display+0x80>)
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <clock_display+0x84>)
 8000d36:	f003 fedf 	bl	8004af8 <siprintf>

	LCD_writeStringXY(0, 0, line1);
 8000d3a:	4a09      	ldr	r2, [pc, #36]	@ (8000d60 <clock_display+0x78>)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fd7b 	bl	800083a <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, line2);
 8000d44:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <clock_display+0x84>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff fd76 	bl	800083a <LCD_writeStringXY>
}
 8000d4e:	bf00      	nop
 8000d50:	3704      	adds	r7, #4
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	08005bb4 	.word	0x08005bb4
 8000d60:	20000198 	.word	0x20000198
 8000d64:	20000014 	.word	0x20000014
 8000d68:	08005bcc 	.word	0x08005bcc
 8000d6c:	200001a8 	.word	0x200001a8

08000d70 <clock_cal>:

void clock_cal() {
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	if (time3SecCnt % 10 == 0) {
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <clock_cal+0x84>)
 8000d76:	6819      	ldr	r1, [r3, #0]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <clock_cal+0x88>)
 8000d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	1aca      	subs	r2, r1, r3
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	d12c      	bne.n	8000de8 <clock_cal+0x78>
		current_time.sec++;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <clock_cal+0x8c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <clock_cal+0x8c>)
 8000d96:	6053      	str	r3, [r2, #4]
		if (current_time.sec >= 60) {
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <clock_cal+0x8c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d9e:	dd23      	ble.n	8000de8 <clock_cal+0x78>
			current_time.sec = 0;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <clock_cal+0x8c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
			current_time.min++;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <clock_cal+0x8c>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <clock_cal+0x8c>)
 8000dae:	6093      	str	r3, [r2, #8]
			if (current_time.min >= 60) {
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <clock_cal+0x8c>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b3b      	cmp	r3, #59	@ 0x3b
 8000db6:	dd17      	ble.n	8000de8 <clock_cal+0x78>
				current_time.min = 0;
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <clock_cal+0x8c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
				current_time.hour++;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <clock_cal+0x8c>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <clock_cal+0x8c>)
 8000dc6:	60d3      	str	r3, [r2, #12]
				if (current_time.hour >= 12) {
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <clock_cal+0x8c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b0b      	cmp	r3, #11
 8000dce:	dd0b      	ble.n	8000de8 <clock_cal+0x78>
					current_time.hour = 1;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <clock_cal+0x8c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	60da      	str	r2, [r3, #12]
					current_time.apm = (current_time.apm == 'A') ? 'P' : 'A';
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <clock_cal+0x8c>)
 8000dd8:	7c1b      	ldrb	r3, [r3, #16]
 8000dda:	2b41      	cmp	r3, #65	@ 0x41
 8000ddc:	d101      	bne.n	8000de2 <clock_cal+0x72>
 8000dde:	2250      	movs	r2, #80	@ 0x50
 8000de0:	e000      	b.n	8000de4 <clock_cal+0x74>
 8000de2:	2241      	movs	r2, #65	@ 0x41
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <clock_cal+0x8c>)
 8000de6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001ec 	.word	0x200001ec
 8000df8:	cccccccd 	.word	0xcccccccd
 8000dfc:	20000000 	.word	0x20000000

08000e00 <clock_set>:

void clock_set() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e110      	b.n	800102e <clock_set+0x22e>
		button_state[i] = HAL_GPIO_ReadPin(GPIOC, button_pins[i]);
 8000e0c:	4a8c      	ldr	r2, [pc, #560]	@ (8001040 <clock_set+0x240>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e14:	4619      	mov	r1, r3
 8000e16:	488b      	ldr	r0, [pc, #556]	@ (8001044 <clock_set+0x244>)
 8000e18:	f000 ff2a 	bl	8001c70 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4a89      	ldr	r2, [pc, #548]	@ (8001048 <clock_set+0x248>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if (last_button_state[i] == 0 && button_state[i] == 1) {
 8000e28:	4a88      	ldr	r2, [pc, #544]	@ (800104c <clock_set+0x24c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 80f1 	bne.w	8001018 <clock_set+0x218>
 8000e36:	4a84      	ldr	r2, [pc, #528]	@ (8001048 <clock_set+0x248>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	f040 80ea 	bne.w	8001018 <clock_set+0x218>
			switch (i) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	f200 80e6 	bhi.w	8001018 <clock_set+0x218>
 8000e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <clock_set+0x54>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e65 	.word	0x08000e65
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000f3d 	.word	0x08000f3d
 8000e60:	08000f9d 	.word	0x08000f9d
			case 0:
				printf("button : %d\r\n", i);
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	487a      	ldr	r0, [pc, #488]	@ (8001050 <clock_set+0x250>)
 8000e68:	f003 fdd6 	bl	8004a18 <iprintf>
				if (set_mode == 2) {
 8000e6c:	4b79      	ldr	r3, [pc, #484]	@ (8001054 <clock_set+0x254>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d116      	bne.n	8000ea2 <clock_set+0xa2>
					current_time.hour++;
 8000e74:	4b78      	ldr	r3, [pc, #480]	@ (8001058 <clock_set+0x258>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a77      	ldr	r2, [pc, #476]	@ (8001058 <clock_set+0x258>)
 8000e7c:	60d3      	str	r3, [r2, #12]
					if (current_time.hour > 12) {
 8000e7e:	4b76      	ldr	r3, [pc, #472]	@ (8001058 <clock_set+0x258>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	f340 80c1 	ble.w	800100a <clock_set+0x20a>
						current_time.hour = 1;
 8000e88:	4b73      	ldr	r3, [pc, #460]	@ (8001058 <clock_set+0x258>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	60da      	str	r2, [r3, #12]
						current_time.apm =
								(current_time.apm == 'A') ? 'P' : 'A';
 8000e8e:	4b72      	ldr	r3, [pc, #456]	@ (8001058 <clock_set+0x258>)
 8000e90:	7c1b      	ldrb	r3, [r3, #16]
						current_time.apm =
 8000e92:	2b41      	cmp	r3, #65	@ 0x41
 8000e94:	d101      	bne.n	8000e9a <clock_set+0x9a>
 8000e96:	2250      	movs	r2, #80	@ 0x50
 8000e98:	e000      	b.n	8000e9c <clock_set+0x9c>
 8000e9a:	2241      	movs	r2, #65	@ 0x41
 8000e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001058 <clock_set+0x258>)
 8000e9e:	741a      	strb	r2, [r3, #16]
					if (alarm_time.hour > 12) {
						alarm_time.hour = 1;
						alarm_time.apm = (alarm_time.apm == 'A') ? 'P' : 'A';
					}
				}
				break;
 8000ea0:	e0b3      	b.n	800100a <clock_set+0x20a>
				} else if (set_mode == 1) {
 8000ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8001054 <clock_set+0x254>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	f040 80af 	bne.w	800100a <clock_set+0x20a>
					alarm_time.hour++;
 8000eac:	4b6b      	ldr	r3, [pc, #428]	@ (800105c <clock_set+0x25c>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800105c <clock_set+0x25c>)
 8000eb4:	60d3      	str	r3, [r2, #12]
					if (alarm_time.hour > 12) {
 8000eb6:	4b69      	ldr	r3, [pc, #420]	@ (800105c <clock_set+0x25c>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	f340 80a5 	ble.w	800100a <clock_set+0x20a>
						alarm_time.hour = 1;
 8000ec0:	4b66      	ldr	r3, [pc, #408]	@ (800105c <clock_set+0x25c>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	60da      	str	r2, [r3, #12]
						alarm_time.apm = (alarm_time.apm == 'A') ? 'P' : 'A';
 8000ec6:	4b65      	ldr	r3, [pc, #404]	@ (800105c <clock_set+0x25c>)
 8000ec8:	7c1b      	ldrb	r3, [r3, #16]
 8000eca:	2b41      	cmp	r3, #65	@ 0x41
 8000ecc:	d101      	bne.n	8000ed2 <clock_set+0xd2>
 8000ece:	2250      	movs	r2, #80	@ 0x50
 8000ed0:	e000      	b.n	8000ed4 <clock_set+0xd4>
 8000ed2:	2241      	movs	r2, #65	@ 0x41
 8000ed4:	4b61      	ldr	r3, [pc, #388]	@ (800105c <clock_set+0x25c>)
 8000ed6:	741a      	strb	r2, [r3, #16]
				break;
 8000ed8:	e097      	b.n	800100a <clock_set+0x20a>

			case 1:
				printf("button : %d\r\n", i);
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	485c      	ldr	r0, [pc, #368]	@ (8001050 <clock_set+0x250>)
 8000ede:	f003 fd9b 	bl	8004a18 <iprintf>
				if (set_mode == 2) {
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <clock_set+0x254>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d112      	bne.n	8000f10 <clock_set+0x110>
					current_time.min++;
 8000eea:	4b5b      	ldr	r3, [pc, #364]	@ (8001058 <clock_set+0x258>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a59      	ldr	r2, [pc, #356]	@ (8001058 <clock_set+0x258>)
 8000ef2:	6093      	str	r3, [r2, #8]
					if (current_time.min >= 60) {
 8000ef4:	4b58      	ldr	r3, [pc, #352]	@ (8001058 <clock_set+0x258>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000efa:	f340 8088 	ble.w	800100e <clock_set+0x20e>
						current_time.min = 0;
 8000efe:	4b56      	ldr	r3, [pc, #344]	@ (8001058 <clock_set+0x258>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
						current_time.hour++;
 8000f04:	4b54      	ldr	r3, [pc, #336]	@ (8001058 <clock_set+0x258>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a53      	ldr	r2, [pc, #332]	@ (8001058 <clock_set+0x258>)
 8000f0c:	60d3      	str	r3, [r2, #12]
					if (alarm_time.min >= 60) {
						alarm_time.min = 0;
						alarm_time.hour++;
					}
				}
				break;
 8000f0e:	e07e      	b.n	800100e <clock_set+0x20e>
				} else if (set_mode == 1) {
 8000f10:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <clock_set+0x254>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d17a      	bne.n	800100e <clock_set+0x20e>
					alarm_time.min++;
 8000f18:	4b50      	ldr	r3, [pc, #320]	@ (800105c <clock_set+0x25c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800105c <clock_set+0x25c>)
 8000f20:	6093      	str	r3, [r2, #8]
					if (alarm_time.min >= 60) {
 8000f22:	4b4e      	ldr	r3, [pc, #312]	@ (800105c <clock_set+0x25c>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f28:	dd71      	ble.n	800100e <clock_set+0x20e>
						alarm_time.min = 0;
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800105c <clock_set+0x25c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
						alarm_time.hour++;
 8000f30:	4b4a      	ldr	r3, [pc, #296]	@ (800105c <clock_set+0x25c>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a49      	ldr	r2, [pc, #292]	@ (800105c <clock_set+0x25c>)
 8000f38:	60d3      	str	r3, [r2, #12]
				break;
 8000f3a:	e068      	b.n	800100e <clock_set+0x20e>

			case 2:
				printf("button : %d\r\n", i);
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4844      	ldr	r0, [pc, #272]	@ (8001050 <clock_set+0x250>)
 8000f40:	f003 fd6a 	bl	8004a18 <iprintf>
				if (set_mode == 2) {
 8000f44:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <clock_set+0x254>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d111      	bne.n	8000f70 <clock_set+0x170>
					current_time.sec++;
 8000f4c:	4b42      	ldr	r3, [pc, #264]	@ (8001058 <clock_set+0x258>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a41      	ldr	r2, [pc, #260]	@ (8001058 <clock_set+0x258>)
 8000f54:	6053      	str	r3, [r2, #4]
					if (current_time.sec >= 60) {
 8000f56:	4b40      	ldr	r3, [pc, #256]	@ (8001058 <clock_set+0x258>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f5c:	dd59      	ble.n	8001012 <clock_set+0x212>
						current_time.sec = 0;
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001058 <clock_set+0x258>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
						current_time.min++;
 8000f64:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <clock_set+0x258>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001058 <clock_set+0x258>)
 8000f6c:	6093      	str	r3, [r2, #8]
					if (alarm_time.sec >= 60) {
						alarm_time.sec = 0;
						alarm_time.min++;
					}
				}
				break;
 8000f6e:	e050      	b.n	8001012 <clock_set+0x212>
				} else if (set_mode == 1) {
 8000f70:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <clock_set+0x254>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d14c      	bne.n	8001012 <clock_set+0x212>
					alarm_time.sec++;
 8000f78:	4b38      	ldr	r3, [pc, #224]	@ (800105c <clock_set+0x25c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a37      	ldr	r2, [pc, #220]	@ (800105c <clock_set+0x25c>)
 8000f80:	6053      	str	r3, [r2, #4]
					if (alarm_time.sec >= 60) {
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <clock_set+0x25c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f88:	dd43      	ble.n	8001012 <clock_set+0x212>
						alarm_time.sec = 0;
 8000f8a:	4b34      	ldr	r3, [pc, #208]	@ (800105c <clock_set+0x25c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
						alarm_time.min++;
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <clock_set+0x25c>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a31      	ldr	r2, [pc, #196]	@ (800105c <clock_set+0x25c>)
 8000f98:	6093      	str	r3, [r2, #8]
				break;
 8000f9a:	e03a      	b.n	8001012 <clock_set+0x212>

			case 3:
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa2:	4828      	ldr	r0, [pc, #160]	@ (8001044 <clock_set+0x244>)
 8000fa4:	f000 fe7c 	bl	8001ca0 <HAL_GPIO_WritePin>
				printf("button : %d\r\n", i);
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4829      	ldr	r0, [pc, #164]	@ (8001050 <clock_set+0x250>)
 8000fac:	f003 fd34 	bl	8004a18 <iprintf>

				set_mode++;
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <clock_set+0x254>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <clock_set+0x254>)
 8000fb8:	6013      	str	r3, [r2, #0]
				if (set_mode > 2) {
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <clock_set+0x254>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	dd02      	ble.n	8000fc8 <clock_set+0x1c8>
					set_mode = 0;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <clock_set+0x254>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
				}

				if (set_mode == 0) {
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <clock_set+0x254>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <clock_set+0x1de>
					current_time.mode = ' ';
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <clock_set+0x258>)
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	745a      	strb	r2, [r3, #17]
					alarm_time.mode = ' ';
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <clock_set+0x25c>)
 8000fd8:	2220      	movs	r2, #32
 8000fda:	745a      	strb	r2, [r3, #17]
				} else if (set_mode == 2) {
					current_time.mode = '*';
					alarm_time.mode = ' ';
				}

				break;
 8000fdc:	e01b      	b.n	8001016 <clock_set+0x216>
				} else if (set_mode == 1) {
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <clock_set+0x254>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d106      	bne.n	8000ff4 <clock_set+0x1f4>
					current_time.mode = ' ';
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <clock_set+0x258>)
 8000fe8:	2220      	movs	r2, #32
 8000fea:	745a      	strb	r2, [r3, #17]
					alarm_time.mode = '*';
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <clock_set+0x25c>)
 8000fee:	222a      	movs	r2, #42	@ 0x2a
 8000ff0:	745a      	strb	r2, [r3, #17]
				break;
 8000ff2:	e010      	b.n	8001016 <clock_set+0x216>
				} else if (set_mode == 2) {
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <clock_set+0x254>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d10c      	bne.n	8001016 <clock_set+0x216>
					current_time.mode = '*';
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <clock_set+0x258>)
 8000ffe:	222a      	movs	r2, #42	@ 0x2a
 8001000:	745a      	strb	r2, [r3, #17]
					alarm_time.mode = ' ';
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <clock_set+0x25c>)
 8001004:	2220      	movs	r2, #32
 8001006:	745a      	strb	r2, [r3, #17]
				break;
 8001008:	e005      	b.n	8001016 <clock_set+0x216>
				break;
 800100a:	bf00      	nop
 800100c:	e004      	b.n	8001018 <clock_set+0x218>
				break;
 800100e:	bf00      	nop
 8001010:	e002      	b.n	8001018 <clock_set+0x218>
				break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <clock_set+0x218>
				break;
 8001016:	bf00      	nop
			}
		}

		last_button_state[i] = button_state[i];
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <clock_set+0x248>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001020:	490a      	ldr	r1, [pc, #40]	@ (800104c <clock_set+0x24c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b03      	cmp	r3, #3
 8001032:	f77f aeeb 	ble.w	8000e0c <clock_set+0xc>
	}
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	08005bf4 	.word	0x08005bf4
 8001044:	40020800 	.word	0x40020800
 8001048:	200001c4 	.word	0x200001c4
 800104c:	200001d4 	.word	0x200001d4
 8001050:	08005be4 	.word	0x08005be4
 8001054:	200001b8 	.word	0x200001b8
 8001058:	20000000 	.word	0x20000000
 800105c:	20000014 	.word	0x20000014

08001060 <alarm_buzzer>:

void alarm_buzzer() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if (!strncmp(&line1[2], &line2[2], 12)) {
 8001064:	220c      	movs	r2, #12
 8001066:	490c      	ldr	r1, [pc, #48]	@ (8001098 <alarm_buzzer+0x38>)
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <alarm_buzzer+0x3c>)
 800106a:	f003 fe47 	bl	8004cfc <strncmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10f      	bne.n	8001094 <alarm_buzzer+0x34>
		if (buzzer_flag == 0) {
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <alarm_buzzer+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10b      	bne.n	8001094 <alarm_buzzer+0x34>
			buzzer_flag = 1;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <alarm_buzzer+0x40>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
			buzzer_counter = 0;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <alarm_buzzer+0x44>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <alarm_buzzer+0x48>)
 8001090:	f000 fe06 	bl	8001ca0 <HAL_GPIO_WritePin>
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001aa 	.word	0x200001aa
 800109c:	2000019a 	.word	0x2000019a
 80010a0:	200001bc 	.word	0x200001bc
 80010a4:	200001c0 	.word	0x200001c0
 80010a8:	40020800 	.word	0x40020800

080010ac <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART6 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ba:	2201      	movs	r2, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <__io_putchar+0x20>)
 80010be:	f002 fbc3 	bl	8003848 <HAL_UART_Transmit>

	return ch;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000150 	.word	0x20000150

080010d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <Error_Handler+0x8>

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001128 <HAL_MspInit+0x4c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111a:	2007      	movs	r0, #7
 800111c:	f000 fb50 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12c      	bne.n	80011a8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001188:	f000 fbee 	bl	8001968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_TIM_Base_MspInit+0x48>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d115      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	201d      	movs	r0, #29
 80011f0:	f000 faf1 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fb0a 	bl	800180e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40000400 	.word	0x40000400
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_UART_MspInit+0x94>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d133      	bne.n	8001296 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <HAL_UART_MspInit+0x9c>)
 8001282:	f000 fb71 	bl	8001968 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2026      	movs	r0, #38	@ 0x26
 800128c:	f000 faa3 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001290:	2026      	movs	r0, #38	@ 0x26
 8001292:	f000 fabc 	bl	800180e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	@ 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 f949 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <TIM3_IRQHandler+0x10>)
 8001312:	f001 fec7 	bl	80030a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000108 	.word	0x20000108

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f002 fb3f 	bl	80039a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000150 	.word	0x20000150

08001334 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
  }

  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e009      	b.n	8001394 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe8f 	bl	80010ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf1      	blt.n	8001380 <_write+0x12>
  }
  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f003 fcb4 	bl	8004dac <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001f0 	.word	0x200001f0
 8001478:	20000348 	.word	0x20000348

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f003 fc73 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f9c7 	bl	8000864 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014e4:	08005c58 	.word	0x08005c58
  ldr r2, =_sbss
 80014e8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80014ec:	20000344 	.word	0x20000344

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f94f 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fdd8 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f967 	bl	800182a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f92f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000028 	.word	0x20000028
 8001590:	20000030 	.word	0x20000030
 8001594:	2000002c 	.word	0x2000002c

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000030 	.word	0x20000030
 80015bc:	200001f4 	.word	0x200001f4

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200001f4 	.word	0x200001f4

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000030 	.word	0x20000030

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	@ 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff feb6 	bl	80015c0 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d008      	beq.n	8001874 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e052      	b.n	800191a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0216 	bic.w	r2, r2, #22
 8001882:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001892:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <HAL_DMA_Abort+0x62>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0208 	bic.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	e013      	b.n	80018ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c6:	f7ff fe7b 	bl	80015c0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d90c      	bls.n	80018ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e015      	b.n	800191a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e4      	bne.n	80018c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	223f      	movs	r2, #63	@ 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e00c      	b.n	800195a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2205      	movs	r2, #5
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e159      	b.n	8001c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8148 	bne.w	8001c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a2 	beq.w	8001c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b57      	ldr	r3, [pc, #348]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a56      	ldr	r2, [pc, #344]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b54      	ldr	r3, [pc, #336]	@ (8001c50 <HAL_GPIO_Init+0x2e8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a52      	ldr	r2, [pc, #328]	@ (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a49      	ldr	r2, [pc, #292]	@ (8001c58 <HAL_GPIO_Init+0x2f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x202>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a48      	ldr	r2, [pc, #288]	@ (8001c5c <HAL_GPIO_Init+0x2f4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x1fe>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a47      	ldr	r2, [pc, #284]	@ (8001c60 <HAL_GPIO_Init+0x2f8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x1fa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a46      	ldr	r2, [pc, #280]	@ (8001c64 <HAL_GPIO_Init+0x2fc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x1f6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <HAL_GPIO_Init+0x300>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x1f2>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x204>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	@ (8001c54 <HAL_GPIO_Init+0x2ec>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8a:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bae:	4a2f      	ldr	r2, [pc, #188]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd8:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bde:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c02:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_GPIO_Init+0x304>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f aea2 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fa16 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	@ 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f001 f8da 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	@ (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	@ (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	@ (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fb26 	bl	80015c0 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 80e0 	bne.w	8002144 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4970      	ldr	r1, [pc, #448]	@ (8002150 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f964 	bl	800225c <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e0d3      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Master_Transmit+0x50>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0cc      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2221      	movs	r2, #33	@ 0x21
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2210      	movs	r2, #16
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	893a      	ldrh	r2, [r7, #8]
 8002002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <HAL_I2C_Master_Transmit+0x1f8>)
 8002012:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f89c 	bl	8002158 <I2C_MasterRequestWrite>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e08d      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002040:	e066      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa22 	bl	8002490 <I2C_WaitOnTXEFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b04      	cmp	r3, #4
 8002058:	d107      	bne.n	800206a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d11b      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d017      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	6a39      	ldr	r1, [r7, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa19 	bl	8002520 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d107      	bne.n	800210c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800210a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01a      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d194      	bne.n	8002042 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	00100002 	.word	0x00100002
 8002154:	ffff0000 	.word	0xffff0000

08002158 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d006      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d003      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002180:	d108      	bne.n	8002194 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00b      	b.n	80021ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	2b12      	cmp	r3, #18
 800219a:	d107      	bne.n	80021ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f84f 	bl	800225c <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021d2:	d103      	bne.n	80021dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e035      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e8:	d108      	bne.n	80021fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	e01b      	b.n	8002234 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	11db      	asrs	r3, r3, #7
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0306 	and.w	r3, r3, #6
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f063 030f 	orn	r3, r3, #15
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	490e      	ldr	r1, [pc, #56]	@ (8002254 <I2C_MasterRequestWrite+0xfc>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f898 	bl	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e010      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4907      	ldr	r1, [pc, #28]	@ (8002258 <I2C_MasterRequestWrite+0x100>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f888 	bl	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	00010008 	.word	0x00010008
 8002258:	00010002 	.word	0x00010002

0800225c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226c:	e048      	b.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d044      	beq.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff f9a3 	bl	80015c0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d139      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	e00c      	b.n	80022cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4013      	ands	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d116      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e023      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10d      	bne.n	8002326 <I2C_WaitOnFlagUntilTimeout+0xca>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	e00c      	b.n	8002340 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	43da      	mvns	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4013      	ands	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	429a      	cmp	r2, r3
 8002344:	d093      	beq.n	800226e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800235e:	e071      	b.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236e:	d123      	bne.n	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e067      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d041      	beq.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c0:	f7ff f8fe 	bl	80015c0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d302      	bcc.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d136      	bne.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10c      	bne.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e00b      	b.n	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	43da      	mvns	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e021      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10c      	bne.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e00b      	b.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f af6d 	bne.w	8002360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	e034      	b.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f886 	bl	80025b0 <I2C_IsAcknowledgeFailed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e034      	b.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d028      	beq.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7ff f883 	bl	80015c0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11d      	bne.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d016      	beq.n	8002508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	2b80      	cmp	r3, #128	@ 0x80
 8002514:	d1c3      	bne.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	e034      	b.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f83e 	bl	80025b0 <I2C_IsAcknowledgeFailed>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e034      	b.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d028      	beq.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	f7ff f83b 	bl	80015c0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11d      	bne.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d016      	beq.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d1c3      	bne.n	800252e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c6:	d11b      	bne.n	8002600 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e267      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800262e:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d00c      	beq.n	8002654 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4b85      	ldr	r3, [pc, #532]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002642:	2b08      	cmp	r3, #8
 8002644:	d112      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b82      	ldr	r3, [pc, #520]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b7e      	ldr	r3, [pc, #504]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e242      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x74>
 8002676:	4b76      	ldr	r3, [pc, #472]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b70      	ldr	r3, [pc, #448]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6f      	ldr	r2, [pc, #444]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b6d      	ldr	r3, [pc, #436]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6c      	ldr	r2, [pc, #432]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 80026a8:	4b69      	ldr	r3, [pc, #420]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b66      	ldr	r3, [pc, #408]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe ff7a 	bl	80015c0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe ff76 	bl	80015c0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e207      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe ff66 	bl	80015c0 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe ff62 	bl	80015c0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1f3      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002726:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11c      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b44      	ldr	r3, [pc, #272]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b41      	ldr	r3, [pc, #260]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1c7      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4937      	ldr	r1, [pc, #220]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e03a      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b34      	ldr	r3, [pc, #208]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe ff1b 	bl	80015c0 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe ff17 	bl	80015c0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1a8      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4925      	ldr	r1, [pc, #148]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fefa 	bl	80015c0 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe fef6 	bl	80015c0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e187      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d036      	beq.n	8002868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_RCC_OscConfig+0x248>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe feda 	bl	80015c0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe fed6 	bl	80015c0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e167      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_RCC_OscConfig+0x240>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
 800282e:	e01b      	b.n	8002868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_OscConfig+0x248>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fec3 	bl	80015c0 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e00e      	b.n	800285c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe febf 	bl	80015c0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d907      	bls.n	800285c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e150      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ea      	bne.n	800283e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8097 	beq.w	80029a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b81      	ldr	r3, [pc, #516]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b7a      	ldr	r3, [pc, #488]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b77      	ldr	r3, [pc, #476]	@ (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b74      	ldr	r3, [pc, #464]	@ (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a73      	ldr	r2, [pc, #460]	@ (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fe7f 	bl	80015c0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fe7b 	bl	80015c0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e10c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ea>
 80028ec:	4b64      	ldr	r3, [pc, #400]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a63      	ldr	r2, [pc, #396]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x30c>
 8002902:	4b5f      	ldr	r3, [pc, #380]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	4a5e      	ldr	r2, [pc, #376]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	@ 0x70
 800290e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	4a5b      	ldr	r2, [pc, #364]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	@ 0x70
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 800291c:	4b58      	ldr	r3, [pc, #352]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a57      	ldr	r2, [pc, #348]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
 8002928:	4b55      	ldr	r3, [pc, #340]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	4a54      	ldr	r2, [pc, #336]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fe40 	bl	80015c0 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fe3c 	bl	80015c0 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0cb      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b49      	ldr	r3, [pc, #292]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ee      	beq.n	8002944 <HAL_RCC_OscConfig+0x334>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe fe2a 	bl	80015c0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fe26 	bl	80015c0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0b5      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ee      	bne.n	8002970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	4a38      	ldr	r2, [pc, #224]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a1 	beq.w	8002af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ae:	4b34      	ldr	r3, [pc, #208]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d05c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d141      	bne.n	8002a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fdfa 	bl	80015c0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fdf6 	bl	80015c0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e087      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	491b      	ldr	r1, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fdcf 	bl	80015c0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe fdcb 	bl	80015c0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e05c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x416>
 8002a44:	e054      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fdb8 	bl	80015c0 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fdb4 	bl	80015c0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e045      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x444>
 8002a72:	e03d      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e038      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x4ec>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d028      	beq.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d121      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11a      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fce6 	bl	80015c0 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe fce2 	bl	80015c0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fc46 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08005bfc 	.word	0x08005bfc
 8002cc4:	20000028 	.word	0x20000028
 8002cc8:	2000002c 	.word	0x2000002c

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b094      	sub	sp, #80	@ 0x50
 8002cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce4:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d00d      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	f200 80e1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x34>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfe:	e0db      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b73      	ldr	r3, [pc, #460]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d04:	e0db      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b73      	ldr	r3, [pc, #460]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0a:	e0d8      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	0159      	lsls	r1, r3, #5
 8002d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d50:	0150      	lsls	r0, r2, #5
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4621      	mov	r1, r4
 8002d58:	1a51      	subs	r1, r2, r1
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d70:	4659      	mov	r1, fp
 8002d72:	018b      	lsls	r3, r1, #6
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	018a      	lsls	r2, r1, #6
 8002d7e:	4651      	mov	r1, sl
 8002d80:	ebb2 0801 	subs.w	r8, r2, r1
 8002d84:	4659      	mov	r1, fp
 8002d86:	eb63 0901 	sbc.w	r9, r3, r1
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	eb18 0303 	adds.w	r3, r8, r3
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	462b      	mov	r3, r5
 8002dac:	eb49 0303 	adc.w	r3, r9, r3
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	024b      	lsls	r3, r1, #9
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc8:	4621      	mov	r1, r4
 8002dca:	024a      	lsls	r2, r1, #9
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ddc:	f7fd fa50 	bl	8000280 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de8:	e058      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	2200      	movs	r2, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	4611      	mov	r1, r2
 8002df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0159      	lsls	r1, r3, #5
 8002e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e16:	0150      	lsls	r0, r2, #5
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e40:	eb63 050b 	sbc.w	r5, r3, fp
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	61fa      	str	r2, [r7, #28]
 8002e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e90:	f7fd f9f6 	bl	8000280 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3750      	adds	r7, #80	@ 0x50
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000028 	.word	0x20000028

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	@ (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08005c0c 	.word	0x08005c0c

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffdc 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0b5b      	lsrs	r3, r3, #13
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08005c0c 	.word	0x08005c0c

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e041      	b.n	8002fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe f928 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 fa70 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e044      	b.n	8003082 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_TIM_Base_Start_IT+0xb0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d018      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003022:	d013      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <HAL_TIM_Base_Start_IT+0xb4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <HAL_TIM_Base_Start_IT+0xb8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_TIM_Base_Start_IT+0xbc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d010      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	e007      	b.n	8003080 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40014000 	.word	0x40014000

080030a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0202 	mvn.w	r2, #2
 80030d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f999 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f98b 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f99c 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0204 	mvn.w	r2, #4
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f973 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f965 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f976 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d020      	beq.n	80031a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0208 	mvn.w	r2, #8
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f94d 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f93f 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f950 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d020      	beq.n	80031ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2208      	movs	r2, #8
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f927 	bl	8003426 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f919 	bl	8003412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f92a 	bl	800343a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0201 	mvn.w	r2, #1
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd30 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800322c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fab0 	bl	8003794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8fb 	bl	800344e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0220 	mvn.w	r2, #32
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa82 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_ConfigClockSource+0x1c>
 800329c:	2302      	movs	r3, #2
 800329e:	e0b4      	b.n	800340a <HAL_TIM_ConfigClockSource+0x186>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d8:	d03e      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0xd4>
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032de:	f200 8087 	bhi.w	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e6:	f000 8086 	beq.w	80033f6 <HAL_TIM_ConfigClockSource+0x172>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ee:	d87f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b70      	cmp	r3, #112	@ 0x70
 80032f2:	d01a      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xa6>
 80032f4:	2b70      	cmp	r3, #112	@ 0x70
 80032f6:	d87b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b60      	cmp	r3, #96	@ 0x60
 80032fa:	d050      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x11a>
 80032fc:	2b60      	cmp	r3, #96	@ 0x60
 80032fe:	d877      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b50      	cmp	r3, #80	@ 0x50
 8003302:	d03c      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xfa>
 8003304:	2b50      	cmp	r3, #80	@ 0x50
 8003306:	d873      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b40      	cmp	r3, #64	@ 0x40
 800330a:	d058      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x13a>
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	d86f      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b30      	cmp	r3, #48	@ 0x30
 8003312:	d064      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x15a>
 8003314:	2b30      	cmp	r3, #48	@ 0x30
 8003316:	d86b      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d060      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	2b20      	cmp	r3, #32
 800331e:	d867      	bhi.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05c      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	2b10      	cmp	r3, #16
 8003326:	d05a      	beq.n	80033de <HAL_TIM_ConfigClockSource+0x15a>
 8003328:	e062      	b.n	80033f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800333a:	f000 f993 	bl	8003664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800334c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	609a      	str	r2, [r3, #8]
      break;
 8003356:	e04f      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	f000 f97c 	bl	8003664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e03c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338a:	461a      	mov	r2, r3
 800338c:	f000 f8f0 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2150      	movs	r1, #80	@ 0x50
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f949 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 800339c:	e02c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 f90f 	bl	80035ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2160      	movs	r1, #96	@ 0x60
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f939 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 80033bc:	e01c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f000 f8d0 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2140      	movs	r1, #64	@ 0x40
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f929 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 80033dc:	e00c      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 f920 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 80033ee:	e003      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a37      	ldr	r2, [pc, #220]	@ (8003554 <TIM_Base_SetConfig+0xf0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00f      	beq.n	800349c <TIM_Base_SetConfig+0x38>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003482:	d00b      	beq.n	800349c <TIM_Base_SetConfig+0x38>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <TIM_Base_SetConfig+0xf4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d007      	beq.n	800349c <TIM_Base_SetConfig+0x38>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a33      	ldr	r2, [pc, #204]	@ (800355c <TIM_Base_SetConfig+0xf8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_Base_SetConfig+0x38>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a32      	ldr	r2, [pc, #200]	@ (8003560 <TIM_Base_SetConfig+0xfc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a28      	ldr	r2, [pc, #160]	@ (8003554 <TIM_Base_SetConfig+0xf0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	@ (8003558 <TIM_Base_SetConfig+0xf4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a24      	ldr	r2, [pc, #144]	@ (800355c <TIM_Base_SetConfig+0xf8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <TIM_Base_SetConfig+0xfc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a22      	ldr	r2, [pc, #136]	@ (8003564 <TIM_Base_SetConfig+0x100>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a21      	ldr	r2, [pc, #132]	@ (8003568 <TIM_Base_SetConfig+0x104>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a20      	ldr	r2, [pc, #128]	@ (800356c <TIM_Base_SetConfig+0x108>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <TIM_Base_SetConfig+0xf0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d103      	bne.n	800352e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800
 8003560:	40000c00 	.word	0x40000c00
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800

08003570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0201 	bic.w	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800359a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f023 030a 	bic.w	r3, r3, #10
 80035ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b087      	sub	sp, #28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 0210 	bic.w	r2, r3, #16
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	f043 0307 	orr.w	r3, r3, #7
 8003650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800367e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	431a      	orrs	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e050      	b.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d013      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10c      	bne.n	800374c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4313      	orrs	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40010000 	.word	0x40010000
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	40000c00 	.word	0x40000c00
 800377c:	40014000 	.word	0x40014000

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fd1c 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	@ 0x24
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fddd 	bl	80043ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	d175      	bne.n	8003954 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Transmit+0x2c>
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e06e      	b.n	8003956 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2221      	movs	r2, #33	@ 0x21
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003886:	f7fd fe9b 	bl	80015c0 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038bc:	e02e      	b.n	800391c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	@ 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fb41 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03a      	b.n	8003956 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e007      	b.n	800390e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1cb      	bne.n	80038be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2140      	movs	r1, #64	@ 0x40
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb0d 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e006      	b.n	8003956 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	4613      	mov	r3, r2
 800396a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	d112      	bne.n	800399e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Receive_IT+0x26>
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e00b      	b.n	80039a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	461a      	mov	r2, r3
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb34 	bl	8004002 <UART_Start_Receive_IT>
 800399a:	4603      	mov	r3, r0
 800399c:	e000      	b.n	80039a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b0ba      	sub	sp, #232	@ 0xe8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_UART_IRQHandler+0x66>
 80039fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fc11 	bl	800422e <UART_Receive_IT>
      return;
 8003a0c:	e273      	b.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80de 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x22c>
 8003a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80d1 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_UART_IRQHandler+0xae>
 8003a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_UART_IRQHandler+0xd2>
 8003a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_UART_IRQHandler+0xf6>
 8003a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <HAL_UART_IRQHandler+0x126>
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f043 0208 	orr.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 820a 	beq.w	8003eec <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_UART_IRQHandler+0x14e>
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fb9c 	bl	800422e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b40      	cmp	r3, #64	@ 0x40
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_UART_IRQHandler+0x17a>
 8003b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d04f      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 faa7 	bl	8004076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d141      	bne.n	8003bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1d9      	bne.n	8003b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d013      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	4a8a      	ldr	r2, [pc, #552]	@ (8003db8 <HAL_UART_IRQHandler+0x410>)
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fec3 	bl	8001922 <HAL_DMA_Abort_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bac:	4610      	mov	r0, r2
 8003bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e00e      	b.n	8003bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9b6 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00a      	b.n	8003bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9b2 	bl	8003f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e006      	b.n	8003bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9ae 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bce:	e18d      	b.n	8003eec <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	bf00      	nop
    return;
 8003bd2:	e18b      	b.n	8003eec <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 8167 	bne.w	8003eac <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8160 	beq.w	8003eac <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8159 	beq.w	8003eac <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b40      	cmp	r3, #64	@ 0x40
 8003c1c:	f040 80ce 	bne.w	8003dbc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a9 	beq.w	8003d88 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	f080 80a2 	bcs.w	8003d88 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c56:	f000 8088 	beq.w	8003d6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1d9      	bne.n	8003c5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e1      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e3      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3a:	f023 0310 	bic.w	r3, r3, #16
 8003d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e3      	bne.n	8003d28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd fd6c 	bl	8001842 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8d9 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d86:	e0b3      	b.n	8003ef0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f040 80ad 	bne.w	8003ef0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da0:	f040 80a6 	bne.w	8003ef0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8c1 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
      return;
 8003db6:	e09b      	b.n	8003ef0 <HAL_UART_IRQHandler+0x548>
 8003db8:	0800413d 	.word	0x0800413d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 808e 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8089 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003df8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e06:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	623b      	str	r3, [r7, #32]
   return(result);
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e84:	61fa      	str	r2, [r7, #28]
 8003e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	69b9      	ldr	r1, [r7, #24]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	617b      	str	r3, [r7, #20]
   return(result);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e3      	bne.n	8003e60 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f847 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eaa:	e023      	b.n	8003ef4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_UART_IRQHandler+0x524>
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f94a 	bl	800415e <UART_Transmit_IT>
    return;
 8003eca:	e014      	b.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f98a 	bl	80041fe <UART_EndTransmit_IT>
    return;
 8003eea:	e004      	b.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
    return;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ef4:	bf00      	nop
  }
}
 8003ef6:	37e8      	adds	r7, #232	@ 0xe8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	e03b      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d037      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fd fb29 	bl	80015c0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e03a      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d023      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b80      	cmp	r3, #128	@ 0x80
 8003f96:	d020      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d01d      	beq.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d116      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f857 	bl	8004076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2208      	movs	r2, #8
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00f      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d0b4      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	4613      	mov	r3, r2
 800400e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	88fa      	ldrh	r2, [r7, #6]
 800401a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2222      	movs	r2, #34	@ 0x22
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004046:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b095      	sub	sp, #84	@ 0x54
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800409e:	643a      	str	r2, [r7, #64]	@ 0x40
 80040a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e5      	bne.n	800407e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3314      	adds	r3, #20
 80040b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d119      	bne.n	8004122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f023 0310 	bic.w	r3, r3, #16
 8004104:	647b      	str	r3, [r7, #68]	@ 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800410e:	61ba      	str	r2, [r7, #24]
 8004110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	613b      	str	r3, [r7, #16]
   return(result);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004130:	bf00      	nop
 8004132:	3754      	adds	r7, #84	@ 0x54
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fee7 	bl	8003f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b21      	cmp	r3, #33	@ 0x21
 8004170:	d13e      	bne.n	80041f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	d114      	bne.n	80041a6 <UART_Transmit_IT+0x48>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	1c9a      	adds	r2, r3, #2
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e008      	b.n	80041b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6211      	str	r1, [r2, #32]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4619      	mov	r1, r3
 80041c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe6c 	bl	8003efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	@ 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b22      	cmp	r3, #34	@ 0x22
 8004248:	f040 80aa 	bne.w	80043a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004254:	d115      	bne.n	8004282 <UART_Receive_IT+0x54>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d111      	bne.n	8004282 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004270:	b29a      	uxth	r2, r3
 8004272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004274:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004280:	e024      	b.n	80042cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004290:	d007      	beq.n	80042a2 <UART_Receive_IT+0x74>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <UART_Receive_IT+0x82>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e008      	b.n	80042c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4619      	mov	r1, r3
 80042da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d15d      	bne.n	800439c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0220 	bic.w	r2, r2, #32
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	2b01      	cmp	r3, #1
 8004324:	d135      	bne.n	8004392 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434c:	623a      	str	r2, [r7, #32]
 800434e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	61bb      	str	r3, [r7, #24]
   return(result);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d10a      	bne.n	8004384 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fdd4 	bl	8003f38 <HAL_UARTEx_RxEventCallback>
 8004390:	e002      	b.n	8004398 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fdbc 	bl	8003f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e002      	b.n	80043a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3730      	adds	r7, #48	@ 0x30
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b0c0      	sub	sp, #256	@ 0x100
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	68d9      	ldr	r1, [r3, #12]
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	ea40 0301 	orr.w	r3, r0, r1
 80043d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004404:	f021 010c 	bic.w	r1, r1, #12
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004412:	430b      	orrs	r3, r1
 8004414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	6999      	ldr	r1, [r3, #24]
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	ea40 0301 	orr.w	r3, r0, r1
 8004432:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b8f      	ldr	r3, [pc, #572]	@ (8004678 <UART_SetConfig+0x2cc>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d005      	beq.n	800444c <UART_SetConfig+0xa0>
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b8d      	ldr	r3, [pc, #564]	@ (800467c <UART_SetConfig+0x2d0>)
 8004448:	429a      	cmp	r2, r3
 800444a:	d104      	bne.n	8004456 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7fe fd64 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 8004450:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004454:	e003      	b.n	800445e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004456:	f7fe fd4b 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 800445a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004468:	f040 810c 	bne.w	8004684 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800446c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004476:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800447a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	1891      	adds	r1, r2, r2
 8004484:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004486:	415b      	adcs	r3, r3
 8004488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800448e:	4621      	mov	r1, r4
 8004490:	eb12 0801 	adds.w	r8, r2, r1
 8004494:	4629      	mov	r1, r5
 8004496:	eb43 0901 	adc.w	r9, r3, r1
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ae:	4690      	mov	r8, r2
 80044b0:	4699      	mov	r9, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	eb18 0303 	adds.w	r3, r8, r3
 80044b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044bc:	462b      	mov	r3, r5
 80044be:	eb49 0303 	adc.w	r3, r9, r3
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044da:	460b      	mov	r3, r1
 80044dc:	18db      	adds	r3, r3, r3
 80044de:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e0:	4613      	mov	r3, r2
 80044e2:	eb42 0303 	adc.w	r3, r2, r3
 80044e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80044e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044f0:	f7fb fec6 	bl	8000280 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4b61      	ldr	r3, [pc, #388]	@ (8004680 <UART_SetConfig+0x2d4>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	011c      	lsls	r4, r3, #4
 8004502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800450c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004510:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	1891      	adds	r1, r2, r2
 800451a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800451c:	415b      	adcs	r3, r3
 800451e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004524:	4641      	mov	r1, r8
 8004526:	eb12 0a01 	adds.w	sl, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb43 0b01 	adc.w	fp, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800453c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004544:	4692      	mov	sl, r2
 8004546:	469b      	mov	fp, r3
 8004548:	4643      	mov	r3, r8
 800454a:	eb1a 0303 	adds.w	r3, sl, r3
 800454e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004552:	464b      	mov	r3, r9
 8004554:	eb4b 0303 	adc.w	r3, fp, r3
 8004558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004568:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800456c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004570:	460b      	mov	r3, r1
 8004572:	18db      	adds	r3, r3, r3
 8004574:	643b      	str	r3, [r7, #64]	@ 0x40
 8004576:	4613      	mov	r3, r2
 8004578:	eb42 0303 	adc.w	r3, r2, r3
 800457c:	647b      	str	r3, [r7, #68]	@ 0x44
 800457e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004582:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004586:	f7fb fe7b 	bl	8000280 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4611      	mov	r1, r2
 8004590:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <UART_SetConfig+0x2d4>)
 8004592:	fba3 2301 	umull	r2, r3, r3, r1
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2264      	movs	r2, #100	@ 0x64
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	1acb      	subs	r3, r1, r3
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045a6:	4b36      	ldr	r3, [pc, #216]	@ (8004680 <UART_SetConfig+0x2d4>)
 80045a8:	fba3 2302 	umull	r2, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045b4:	441c      	add	r4, r3
 80045b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045d0:	415b      	adcs	r3, r3
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045d8:	4641      	mov	r1, r8
 80045da:	1851      	adds	r1, r2, r1
 80045dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80045de:	4649      	mov	r1, r9
 80045e0:	414b      	adcs	r3, r1
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045f0:	4659      	mov	r1, fp
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	4651      	mov	r1, sl
 80045f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fa:	4651      	mov	r1, sl
 80045fc:	00ca      	lsls	r2, r1, #3
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4603      	mov	r3, r0
 8004604:	4642      	mov	r2, r8
 8004606:	189b      	adds	r3, r3, r2
 8004608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800460c:	464b      	mov	r3, r9
 800460e:	460a      	mov	r2, r1
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004624:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800463e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004642:	f7fb fe1d 	bl	8000280 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <UART_SetConfig+0x2d4>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	@ 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	3332      	adds	r3, #50	@ 0x32
 800465e:	4a08      	ldr	r2, [pc, #32]	@ (8004680 <UART_SetConfig+0x2d4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 0207 	and.w	r2, r3, #7
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4422      	add	r2, r4
 8004672:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004674:	e106      	b.n	8004884 <UART_SetConfig+0x4d8>
 8004676:	bf00      	nop
 8004678:	40011000 	.word	0x40011000
 800467c:	40011400 	.word	0x40011400
 8004680:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800468e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004692:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
 800469a:	1891      	adds	r1, r2, r2
 800469c:	6239      	str	r1, [r7, #32]
 800469e:	415b      	adcs	r3, r3
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a6:	4641      	mov	r1, r8
 80046a8:	1854      	adds	r4, r2, r1
 80046aa:	4649      	mov	r1, r9
 80046ac:	eb43 0501 	adc.w	r5, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	00eb      	lsls	r3, r5, #3
 80046ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046be:	00e2      	lsls	r2, r4, #3
 80046c0:	4614      	mov	r4, r2
 80046c2:	461d      	mov	r5, r3
 80046c4:	4643      	mov	r3, r8
 80046c6:	18e3      	adds	r3, r4, r3
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046cc:	464b      	mov	r3, r9
 80046ce:	eb45 0303 	adc.w	r3, r5, r3
 80046d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046f2:	4629      	mov	r1, r5
 80046f4:	008b      	lsls	r3, r1, #2
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fc:	4621      	mov	r1, r4
 80046fe:	008a      	lsls	r2, r1, #2
 8004700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004704:	f7fb fdbc 	bl	8000280 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b60      	ldr	r3, [pc, #384]	@ (8004890 <UART_SetConfig+0x4e4>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	011c      	lsls	r4, r3, #4
 8004716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004724:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	1891      	adds	r1, r2, r2
 800472e:	61b9      	str	r1, [r7, #24]
 8004730:	415b      	adcs	r3, r3
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004738:	4641      	mov	r1, r8
 800473a:	1851      	adds	r1, r2, r1
 800473c:	6139      	str	r1, [r7, #16]
 800473e:	4649      	mov	r1, r9
 8004740:	414b      	adcs	r3, r1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004750:	4659      	mov	r1, fp
 8004752:	00cb      	lsls	r3, r1, #3
 8004754:	4651      	mov	r1, sl
 8004756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475a:	4651      	mov	r1, sl
 800475c:	00ca      	lsls	r2, r1, #3
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	4603      	mov	r3, r0
 8004764:	4642      	mov	r2, r8
 8004766:	189b      	adds	r3, r3, r2
 8004768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800476c:	464b      	mov	r3, r9
 800476e:	460a      	mov	r2, r1
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004782:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047a2:	f7fb fd6d 	bl	8000280 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	4b38      	ldr	r3, [pc, #224]	@ (8004890 <UART_SetConfig+0x4e4>)
 80047ae:	fba3 2301 	umull	r2, r3, r3, r1
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	@ 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	@ 0x32
 80047c0:	4a33      	ldr	r2, [pc, #204]	@ (8004890 <UART_SetConfig+0x4e4>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047cc:	441c      	add	r4, r3
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80047d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80047d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	415b      	adcs	r3, r3
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ec:	4641      	mov	r1, r8
 80047ee:	1851      	adds	r1, r2, r1
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	4649      	mov	r1, r9
 80047f4:	414b      	adcs	r3, r1
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004804:	4659      	mov	r1, fp
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4651      	mov	r1, sl
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4642      	mov	r2, r8
 800481a:	189b      	adds	r3, r3, r2
 800481c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800481e:	464b      	mov	r3, r9
 8004820:	460a      	mov	r2, r1
 8004822:	eb42 0303 	adc.w	r3, r2, r3
 8004826:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	663b      	str	r3, [r7, #96]	@ 0x60
 8004832:	667a      	str	r2, [r7, #100]	@ 0x64
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004840:	4649      	mov	r1, r9
 8004842:	008b      	lsls	r3, r1, #2
 8004844:	4641      	mov	r1, r8
 8004846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484a:	4641      	mov	r1, r8
 800484c:	008a      	lsls	r2, r1, #2
 800484e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004852:	f7fb fd15 	bl	8000280 <__aeabi_uldivmod>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <UART_SetConfig+0x4e4>)
 800485c:	fba3 1302 	umull	r1, r3, r3, r2
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	2164      	movs	r1, #100	@ 0x64
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	3332      	adds	r3, #50	@ 0x32
 800486e:	4a08      	ldr	r2, [pc, #32]	@ (8004890 <UART_SetConfig+0x4e4>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	f003 020f 	and.w	r2, r3, #15
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4422      	add	r2, r4
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004890:	51eb851f 	.word	0x51eb851f

08004894 <std>:
 8004894:	2300      	movs	r3, #0
 8004896:	b510      	push	{r4, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	e9c0 3300 	strd	r3, r3, [r0]
 800489e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048a2:	6083      	str	r3, [r0, #8]
 80048a4:	8181      	strh	r1, [r0, #12]
 80048a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80048a8:	81c2      	strh	r2, [r0, #14]
 80048aa:	6183      	str	r3, [r0, #24]
 80048ac:	4619      	mov	r1, r3
 80048ae:	2208      	movs	r2, #8
 80048b0:	305c      	adds	r0, #92	@ 0x5c
 80048b2:	f000 fa1b 	bl	8004cec <memset>
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <std+0x58>)
 80048b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <std+0x5c>)
 80048bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048be:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <std+0x60>)
 80048c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <std+0x64>)
 80048c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <std+0x68>)
 80048c8:	6224      	str	r4, [r4, #32]
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d006      	beq.n	80048dc <std+0x48>
 80048ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048d2:	4294      	cmp	r4, r2
 80048d4:	d002      	beq.n	80048dc <std+0x48>
 80048d6:	33d0      	adds	r3, #208	@ 0xd0
 80048d8:	429c      	cmp	r4, r3
 80048da:	d105      	bne.n	80048e8 <std+0x54>
 80048dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e4:	f000 ba8c 	b.w	8004e00 <__retarget_lock_init_recursive>
 80048e8:	bd10      	pop	{r4, pc}
 80048ea:	bf00      	nop
 80048ec:	08004b3d 	.word	0x08004b3d
 80048f0:	08004b5f 	.word	0x08004b5f
 80048f4:	08004b97 	.word	0x08004b97
 80048f8:	08004bbb 	.word	0x08004bbb
 80048fc:	200001f8 	.word	0x200001f8

08004900 <stdio_exit_handler>:
 8004900:	4a02      	ldr	r2, [pc, #8]	@ (800490c <stdio_exit_handler+0xc>)
 8004902:	4903      	ldr	r1, [pc, #12]	@ (8004910 <stdio_exit_handler+0x10>)
 8004904:	4803      	ldr	r0, [pc, #12]	@ (8004914 <stdio_exit_handler+0x14>)
 8004906:	f000 b869 	b.w	80049dc <_fwalk_sglue>
 800490a:	bf00      	nop
 800490c:	20000034 	.word	0x20000034
 8004910:	0800594d 	.word	0x0800594d
 8004914:	20000044 	.word	0x20000044

08004918 <cleanup_stdio>:
 8004918:	6841      	ldr	r1, [r0, #4]
 800491a:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <cleanup_stdio+0x34>)
 800491c:	4299      	cmp	r1, r3
 800491e:	b510      	push	{r4, lr}
 8004920:	4604      	mov	r4, r0
 8004922:	d001      	beq.n	8004928 <cleanup_stdio+0x10>
 8004924:	f001 f812 	bl	800594c <_fflush_r>
 8004928:	68a1      	ldr	r1, [r4, #8]
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <cleanup_stdio+0x38>)
 800492c:	4299      	cmp	r1, r3
 800492e:	d002      	beq.n	8004936 <cleanup_stdio+0x1e>
 8004930:	4620      	mov	r0, r4
 8004932:	f001 f80b 	bl	800594c <_fflush_r>
 8004936:	68e1      	ldr	r1, [r4, #12]
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <cleanup_stdio+0x3c>)
 800493a:	4299      	cmp	r1, r3
 800493c:	d004      	beq.n	8004948 <cleanup_stdio+0x30>
 800493e:	4620      	mov	r0, r4
 8004940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004944:	f001 b802 	b.w	800594c <_fflush_r>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	bf00      	nop
 800494c:	200001f8 	.word	0x200001f8
 8004950:	20000260 	.word	0x20000260
 8004954:	200002c8 	.word	0x200002c8

08004958 <global_stdio_init.part.0>:
 8004958:	b510      	push	{r4, lr}
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <global_stdio_init.part.0+0x30>)
 800495c:	4c0b      	ldr	r4, [pc, #44]	@ (800498c <global_stdio_init.part.0+0x34>)
 800495e:	4a0c      	ldr	r2, [pc, #48]	@ (8004990 <global_stdio_init.part.0+0x38>)
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	4620      	mov	r0, r4
 8004964:	2200      	movs	r2, #0
 8004966:	2104      	movs	r1, #4
 8004968:	f7ff ff94 	bl	8004894 <std>
 800496c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004970:	2201      	movs	r2, #1
 8004972:	2109      	movs	r1, #9
 8004974:	f7ff ff8e 	bl	8004894 <std>
 8004978:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800497c:	2202      	movs	r2, #2
 800497e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004982:	2112      	movs	r1, #18
 8004984:	f7ff bf86 	b.w	8004894 <std>
 8004988:	20000330 	.word	0x20000330
 800498c:	200001f8 	.word	0x200001f8
 8004990:	08004901 	.word	0x08004901

08004994 <__sfp_lock_acquire>:
 8004994:	4801      	ldr	r0, [pc, #4]	@ (800499c <__sfp_lock_acquire+0x8>)
 8004996:	f000 ba34 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 800499a:	bf00      	nop
 800499c:	20000339 	.word	0x20000339

080049a0 <__sfp_lock_release>:
 80049a0:	4801      	ldr	r0, [pc, #4]	@ (80049a8 <__sfp_lock_release+0x8>)
 80049a2:	f000 ba2f 	b.w	8004e04 <__retarget_lock_release_recursive>
 80049a6:	bf00      	nop
 80049a8:	20000339 	.word	0x20000339

080049ac <__sinit>:
 80049ac:	b510      	push	{r4, lr}
 80049ae:	4604      	mov	r4, r0
 80049b0:	f7ff fff0 	bl	8004994 <__sfp_lock_acquire>
 80049b4:	6a23      	ldr	r3, [r4, #32]
 80049b6:	b11b      	cbz	r3, 80049c0 <__sinit+0x14>
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	f7ff bff0 	b.w	80049a0 <__sfp_lock_release>
 80049c0:	4b04      	ldr	r3, [pc, #16]	@ (80049d4 <__sinit+0x28>)
 80049c2:	6223      	str	r3, [r4, #32]
 80049c4:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <__sinit+0x2c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f5      	bne.n	80049b8 <__sinit+0xc>
 80049cc:	f7ff ffc4 	bl	8004958 <global_stdio_init.part.0>
 80049d0:	e7f2      	b.n	80049b8 <__sinit+0xc>
 80049d2:	bf00      	nop
 80049d4:	08004919 	.word	0x08004919
 80049d8:	20000330 	.word	0x20000330

080049dc <_fwalk_sglue>:
 80049dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e0:	4607      	mov	r7, r0
 80049e2:	4688      	mov	r8, r1
 80049e4:	4614      	mov	r4, r2
 80049e6:	2600      	movs	r6, #0
 80049e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049ec:	f1b9 0901 	subs.w	r9, r9, #1
 80049f0:	d505      	bpl.n	80049fe <_fwalk_sglue+0x22>
 80049f2:	6824      	ldr	r4, [r4, #0]
 80049f4:	2c00      	cmp	r4, #0
 80049f6:	d1f7      	bne.n	80049e8 <_fwalk_sglue+0xc>
 80049f8:	4630      	mov	r0, r6
 80049fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d907      	bls.n	8004a14 <_fwalk_sglue+0x38>
 8004a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	d003      	beq.n	8004a14 <_fwalk_sglue+0x38>
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c0      	blx	r8
 8004a12:	4306      	orrs	r6, r0
 8004a14:	3568      	adds	r5, #104	@ 0x68
 8004a16:	e7e9      	b.n	80049ec <_fwalk_sglue+0x10>

08004a18 <iprintf>:
 8004a18:	b40f      	push	{r0, r1, r2, r3}
 8004a1a:	b507      	push	{r0, r1, r2, lr}
 8004a1c:	4906      	ldr	r1, [pc, #24]	@ (8004a38 <iprintf+0x20>)
 8004a1e:	ab04      	add	r3, sp, #16
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a26:	6881      	ldr	r1, [r0, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	f000 fc67 	bl	80052fc <_vfiprintf_r>
 8004a2e:	b003      	add	sp, #12
 8004a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a34:	b004      	add	sp, #16
 8004a36:	4770      	bx	lr
 8004a38:	20000040 	.word	0x20000040

08004a3c <_puts_r>:
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b570      	push	{r4, r5, r6, lr}
 8004a40:	6884      	ldr	r4, [r0, #8]
 8004a42:	4605      	mov	r5, r0
 8004a44:	460e      	mov	r6, r1
 8004a46:	b90b      	cbnz	r3, 8004a4c <_puts_r+0x10>
 8004a48:	f7ff ffb0 	bl	80049ac <__sinit>
 8004a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a4e:	07db      	lsls	r3, r3, #31
 8004a50:	d405      	bmi.n	8004a5e <_puts_r+0x22>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	0598      	lsls	r0, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_puts_r+0x22>
 8004a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5a:	f000 f9d2 	bl	8004e02 <__retarget_lock_acquire_recursive>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	0719      	lsls	r1, r3, #28
 8004a62:	d502      	bpl.n	8004a6a <_puts_r+0x2e>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d135      	bne.n	8004ad6 <_puts_r+0x9a>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f8e7 	bl	8004c40 <__swsetup_r>
 8004a72:	b380      	cbz	r0, 8004ad6 <_puts_r+0x9a>
 8004a74:	f04f 35ff 	mov.w	r5, #4294967295
 8004a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a7a:	07da      	lsls	r2, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_puts_r+0x4e>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_puts_r+0x4e>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f000 f9bd 	bl	8004e04 <__retarget_lock_release_recursive>
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da04      	bge.n	8004a9c <_puts_r+0x60>
 8004a92:	69a2      	ldr	r2, [r4, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	dc17      	bgt.n	8004ac8 <_puts_r+0x8c>
 8004a98:	290a      	cmp	r1, #10
 8004a9a:	d015      	beq.n	8004ac8 <_puts_r+0x8c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	7019      	strb	r1, [r3, #0]
 8004aa4:	68a3      	ldr	r3, [r4, #8]
 8004aa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	60a3      	str	r3, [r4, #8]
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	d1ed      	bne.n	8004a8e <_puts_r+0x52>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da11      	bge.n	8004ada <_puts_r+0x9e>
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	210a      	movs	r1, #10
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 f881 	bl	8004bc2 <__swbuf_r>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d0d7      	beq.n	8004a74 <_puts_r+0x38>
 8004ac4:	250a      	movs	r5, #10
 8004ac6:	e7d7      	b.n	8004a78 <_puts_r+0x3c>
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f879 	bl	8004bc2 <__swbuf_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d1e7      	bne.n	8004aa4 <_puts_r+0x68>
 8004ad4:	e7ce      	b.n	8004a74 <_puts_r+0x38>
 8004ad6:	3e01      	subs	r6, #1
 8004ad8:	e7e4      	b.n	8004aa4 <_puts_r+0x68>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	220a      	movs	r2, #10
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e7ee      	b.n	8004ac4 <_puts_r+0x88>
	...

08004ae8 <puts>:
 8004ae8:	4b02      	ldr	r3, [pc, #8]	@ (8004af4 <puts+0xc>)
 8004aea:	4601      	mov	r1, r0
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f7ff bfa5 	b.w	8004a3c <_puts_r>
 8004af2:	bf00      	nop
 8004af4:	20000040 	.word	0x20000040

08004af8 <siprintf>:
 8004af8:	b40e      	push	{r1, r2, r3}
 8004afa:	b510      	push	{r4, lr}
 8004afc:	b09d      	sub	sp, #116	@ 0x74
 8004afe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004b00:	9002      	str	r0, [sp, #8]
 8004b02:	9006      	str	r0, [sp, #24]
 8004b04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b08:	480a      	ldr	r0, [pc, #40]	@ (8004b34 <siprintf+0x3c>)
 8004b0a:	9107      	str	r1, [sp, #28]
 8004b0c:	9104      	str	r1, [sp, #16]
 8004b0e:	490a      	ldr	r1, [pc, #40]	@ (8004b38 <siprintf+0x40>)
 8004b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b14:	9105      	str	r1, [sp, #20]
 8004b16:	2400      	movs	r4, #0
 8004b18:	a902      	add	r1, sp, #8
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004b20:	f000 fac6 	bl	80050b0 <_svfiprintf_r>
 8004b24:	9b02      	ldr	r3, [sp, #8]
 8004b26:	701c      	strb	r4, [r3, #0]
 8004b28:	b01d      	add	sp, #116	@ 0x74
 8004b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b2e:	b003      	add	sp, #12
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000040 	.word	0x20000040
 8004b38:	ffff0208 	.word	0xffff0208

08004b3c <__sread>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	460c      	mov	r4, r1
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	f000 f90e 	bl	8004d64 <_read_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	bfab      	itete	ge
 8004b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b50:	181b      	addge	r3, r3, r0
 8004b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b56:	bfac      	ite	ge
 8004b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b5a:	81a3      	strhlt	r3, [r4, #12]
 8004b5c:	bd10      	pop	{r4, pc}

08004b5e <__swrite>:
 8004b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	461f      	mov	r7, r3
 8004b64:	898b      	ldrh	r3, [r1, #12]
 8004b66:	05db      	lsls	r3, r3, #23
 8004b68:	4605      	mov	r5, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	d505      	bpl.n	8004b7c <__swrite+0x1e>
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2302      	movs	r3, #2
 8004b76:	2200      	movs	r2, #0
 8004b78:	f000 f8e2 	bl	8004d40 <_lseek_r>
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b92:	f000 b8f9 	b.w	8004d88 <_write_r>

08004b96 <__sseek>:
 8004b96:	b510      	push	{r4, lr}
 8004b98:	460c      	mov	r4, r1
 8004b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9e:	f000 f8cf 	bl	8004d40 <_lseek_r>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	bf15      	itete	ne
 8004ba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004baa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bb2:	81a3      	strheq	r3, [r4, #12]
 8004bb4:	bf18      	it	ne
 8004bb6:	81a3      	strhne	r3, [r4, #12]
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <__sclose>:
 8004bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbe:	f000 b8af 	b.w	8004d20 <_close_r>

08004bc2 <__swbuf_r>:
 8004bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc4:	460e      	mov	r6, r1
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	4605      	mov	r5, r0
 8004bca:	b118      	cbz	r0, 8004bd4 <__swbuf_r+0x12>
 8004bcc:	6a03      	ldr	r3, [r0, #32]
 8004bce:	b90b      	cbnz	r3, 8004bd4 <__swbuf_r+0x12>
 8004bd0:	f7ff feec 	bl	80049ac <__sinit>
 8004bd4:	69a3      	ldr	r3, [r4, #24]
 8004bd6:	60a3      	str	r3, [r4, #8]
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	071a      	lsls	r2, r3, #28
 8004bdc:	d501      	bpl.n	8004be2 <__swbuf_r+0x20>
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	b943      	cbnz	r3, 8004bf4 <__swbuf_r+0x32>
 8004be2:	4621      	mov	r1, r4
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 f82b 	bl	8004c40 <__swsetup_r>
 8004bea:	b118      	cbz	r0, 8004bf4 <__swbuf_r+0x32>
 8004bec:	f04f 37ff 	mov.w	r7, #4294967295
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	6922      	ldr	r2, [r4, #16]
 8004bf8:	1a98      	subs	r0, r3, r2
 8004bfa:	6963      	ldr	r3, [r4, #20]
 8004bfc:	b2f6      	uxtb	r6, r6
 8004bfe:	4283      	cmp	r3, r0
 8004c00:	4637      	mov	r7, r6
 8004c02:	dc05      	bgt.n	8004c10 <__swbuf_r+0x4e>
 8004c04:	4621      	mov	r1, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 fea0 	bl	800594c <_fflush_r>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d1ed      	bne.n	8004bec <__swbuf_r+0x2a>
 8004c10:	68a3      	ldr	r3, [r4, #8]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60a3      	str	r3, [r4, #8]
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	701e      	strb	r6, [r3, #0]
 8004c1e:	6962      	ldr	r2, [r4, #20]
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d004      	beq.n	8004c30 <__swbuf_r+0x6e>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	07db      	lsls	r3, r3, #31
 8004c2a:	d5e1      	bpl.n	8004bf0 <__swbuf_r+0x2e>
 8004c2c:	2e0a      	cmp	r6, #10
 8004c2e:	d1df      	bne.n	8004bf0 <__swbuf_r+0x2e>
 8004c30:	4621      	mov	r1, r4
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 fe8a 	bl	800594c <_fflush_r>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d0d9      	beq.n	8004bf0 <__swbuf_r+0x2e>
 8004c3c:	e7d6      	b.n	8004bec <__swbuf_r+0x2a>
	...

08004c40 <__swsetup_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <__swsetup_r+0xa8>)
 8004c44:	4605      	mov	r5, r0
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	460c      	mov	r4, r1
 8004c4a:	b118      	cbz	r0, 8004c54 <__swsetup_r+0x14>
 8004c4c:	6a03      	ldr	r3, [r0, #32]
 8004c4e:	b90b      	cbnz	r3, 8004c54 <__swsetup_r+0x14>
 8004c50:	f7ff feac 	bl	80049ac <__sinit>
 8004c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c58:	0719      	lsls	r1, r3, #28
 8004c5a:	d422      	bmi.n	8004ca2 <__swsetup_r+0x62>
 8004c5c:	06da      	lsls	r2, r3, #27
 8004c5e:	d407      	bmi.n	8004c70 <__swsetup_r+0x30>
 8004c60:	2209      	movs	r2, #9
 8004c62:	602a      	str	r2, [r5, #0]
 8004c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	e033      	b.n	8004cd8 <__swsetup_r+0x98>
 8004c70:	0758      	lsls	r0, r3, #29
 8004c72:	d512      	bpl.n	8004c9a <__swsetup_r+0x5a>
 8004c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c76:	b141      	cbz	r1, 8004c8a <__swsetup_r+0x4a>
 8004c78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	d002      	beq.n	8004c86 <__swsetup_r+0x46>
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f8c1 	bl	8004e08 <_free_r>
 8004c86:	2300      	movs	r3, #0
 8004c88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	2300      	movs	r3, #0
 8004c94:	6063      	str	r3, [r4, #4]
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f043 0308 	orr.w	r3, r3, #8
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	b94b      	cbnz	r3, 8004cba <__swsetup_r+0x7a>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb0:	d003      	beq.n	8004cba <__swsetup_r+0x7a>
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 fe97 	bl	80059e8 <__smakebuf_r>
 8004cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cbe:	f013 0201 	ands.w	r2, r3, #1
 8004cc2:	d00a      	beq.n	8004cda <__swsetup_r+0x9a>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60a2      	str	r2, [r4, #8]
 8004cc8:	6962      	ldr	r2, [r4, #20]
 8004cca:	4252      	negs	r2, r2
 8004ccc:	61a2      	str	r2, [r4, #24]
 8004cce:	6922      	ldr	r2, [r4, #16]
 8004cd0:	b942      	cbnz	r2, 8004ce4 <__swsetup_r+0xa4>
 8004cd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cd6:	d1c5      	bne.n	8004c64 <__swsetup_r+0x24>
 8004cd8:	bd38      	pop	{r3, r4, r5, pc}
 8004cda:	0799      	lsls	r1, r3, #30
 8004cdc:	bf58      	it	pl
 8004cde:	6962      	ldrpl	r2, [r4, #20]
 8004ce0:	60a2      	str	r2, [r4, #8]
 8004ce2:	e7f4      	b.n	8004cce <__swsetup_r+0x8e>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7f7      	b.n	8004cd8 <__swsetup_r+0x98>
 8004ce8:	20000040 	.word	0x20000040

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <strncmp>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	b16a      	cbz	r2, 8004d1c <strncmp+0x20>
 8004d00:	3901      	subs	r1, #1
 8004d02:	1884      	adds	r4, r0, r2
 8004d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <strncmp+0x1c>
 8004d10:	42a0      	cmp	r0, r4
 8004d12:	d001      	beq.n	8004d18 <strncmp+0x1c>
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	d1f5      	bne.n	8004d04 <strncmp+0x8>
 8004d18:	1ad0      	subs	r0, r2, r3
 8004d1a:	bd10      	pop	{r4, pc}
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	e7fc      	b.n	8004d1a <strncmp+0x1e>

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d06      	ldr	r5, [pc, #24]	@ (8004d3c <_close_r+0x1c>)
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fb3b 	bl	80013a6 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000334 	.word	0x20000334

08004d40 <_lseek_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	@ (8004d60 <_lseek_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fb50 	bl	80013f4 <_lseek>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_lseek_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_lseek_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000334 	.word	0x20000334

08004d64 <_read_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	@ (8004d84 <_read_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fade 	bl	8001334 <_read>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_read_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_read_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000334 	.word	0x20000334

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	@ (8004da8 <_write_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fae9 	bl	800136e <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000334 	.word	0x20000334

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	@ (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000040 	.word	0x20000040

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	@ (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f000 fed8 	bl	8005b80 <_init>
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08005c50 	.word	0x08005c50
 8004df4:	08005c50 	.word	0x08005c50
 8004df8:	08005c50 	.word	0x08005c50
 8004dfc:	08005c54 	.word	0x08005c54

08004e00 <__retarget_lock_init_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_acquire_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <__retarget_lock_release_recursive>:
 8004e04:	4770      	bx	lr
	...

08004e08 <_free_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d041      	beq.n	8004e94 <_free_r+0x8c>
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f0c      	subs	r4, r1, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfb8      	it	lt
 8004e1a:	18e4      	addlt	r4, r4, r3
 8004e1c:	f000 f8e0 	bl	8004fe0 <__malloc_lock>
 8004e20:	4a1d      	ldr	r2, [pc, #116]	@ (8004e98 <_free_r+0x90>)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	b933      	cbnz	r3, 8004e34 <_free_r+0x2c>
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6014      	str	r4, [r2, #0]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e30:	f000 b8dc 	b.w	8004fec <__malloc_unlock>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d908      	bls.n	8004e4a <_free_r+0x42>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	1821      	adds	r1, r4, r0
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	e7ed      	b.n	8004e26 <_free_r+0x1e>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b10b      	cbz	r3, 8004e54 <_free_r+0x4c>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d9fa      	bls.n	8004e4a <_free_r+0x42>
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d10b      	bne.n	8004e74 <_free_r+0x6c>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	4401      	add	r1, r0
 8004e60:	1850      	adds	r0, r2, r1
 8004e62:	4283      	cmp	r3, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	d1e0      	bne.n	8004e2a <_free_r+0x22>
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6053      	str	r3, [r2, #4]
 8004e6e:	4408      	add	r0, r1
 8004e70:	6010      	str	r0, [r2, #0]
 8004e72:	e7da      	b.n	8004e2a <_free_r+0x22>
 8004e74:	d902      	bls.n	8004e7c <_free_r+0x74>
 8004e76:	230c      	movs	r3, #12
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	e7d6      	b.n	8004e2a <_free_r+0x22>
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	1821      	adds	r1, r4, r0
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf04      	itt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	bf04      	itt	eq
 8004e8c:	1809      	addeq	r1, r1, r0
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6054      	str	r4, [r2, #4]
 8004e92:	e7ca      	b.n	8004e2a <_free_r+0x22>
 8004e94:	bd38      	pop	{r3, r4, r5, pc}
 8004e96:	bf00      	nop
 8004e98:	20000340 	.word	0x20000340

08004e9c <sbrk_aligned>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004edc <sbrk_aligned+0x40>)
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	6831      	ldr	r1, [r6, #0]
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	b911      	cbnz	r1, 8004eae <sbrk_aligned+0x12>
 8004ea8:	f000 fe16 	bl	8005ad8 <_sbrk_r>
 8004eac:	6030      	str	r0, [r6, #0]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 fe11 	bl	8005ad8 <_sbrk_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d103      	bne.n	8004ec2 <sbrk_aligned+0x26>
 8004eba:	f04f 34ff 	mov.w	r4, #4294967295
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	1cc4      	adds	r4, r0, #3
 8004ec4:	f024 0403 	bic.w	r4, r4, #3
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d0f8      	beq.n	8004ebe <sbrk_aligned+0x22>
 8004ecc:	1a21      	subs	r1, r4, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 fe02 	bl	8005ad8 <_sbrk_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1f2      	bne.n	8004ebe <sbrk_aligned+0x22>
 8004ed8:	e7ef      	b.n	8004eba <sbrk_aligned+0x1e>
 8004eda:	bf00      	nop
 8004edc:	2000033c 	.word	0x2000033c

08004ee0 <_malloc_r>:
 8004ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	1ccd      	adds	r5, r1, #3
 8004ee6:	f025 0503 	bic.w	r5, r5, #3
 8004eea:	3508      	adds	r5, #8
 8004eec:	2d0c      	cmp	r5, #12
 8004eee:	bf38      	it	cc
 8004ef0:	250c      	movcc	r5, #12
 8004ef2:	2d00      	cmp	r5, #0
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	db01      	blt.n	8004efc <_malloc_r+0x1c>
 8004ef8:	42a9      	cmp	r1, r5
 8004efa:	d904      	bls.n	8004f06 <_malloc_r+0x26>
 8004efc:	230c      	movs	r3, #12
 8004efe:	6033      	str	r3, [r6, #0]
 8004f00:	2000      	movs	r0, #0
 8004f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fdc <_malloc_r+0xfc>
 8004f0a:	f000 f869 	bl	8004fe0 <__malloc_lock>
 8004f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f12:	461c      	mov	r4, r3
 8004f14:	bb44      	cbnz	r4, 8004f68 <_malloc_r+0x88>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbf 	bl	8004e9c <sbrk_aligned>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	4604      	mov	r4, r0
 8004f22:	d158      	bne.n	8004fd6 <_malloc_r+0xf6>
 8004f24:	f8d8 4000 	ldr.w	r4, [r8]
 8004f28:	4627      	mov	r7, r4
 8004f2a:	2f00      	cmp	r7, #0
 8004f2c:	d143      	bne.n	8004fb6 <_malloc_r+0xd6>
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	d04b      	beq.n	8004fca <_malloc_r+0xea>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4639      	mov	r1, r7
 8004f36:	4630      	mov	r0, r6
 8004f38:	eb04 0903 	add.w	r9, r4, r3
 8004f3c:	f000 fdcc 	bl	8005ad8 <_sbrk_r>
 8004f40:	4581      	cmp	r9, r0
 8004f42:	d142      	bne.n	8004fca <_malloc_r+0xea>
 8004f44:	6821      	ldr	r1, [r4, #0]
 8004f46:	1a6d      	subs	r5, r5, r1
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7ff ffa6 	bl	8004e9c <sbrk_aligned>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d03a      	beq.n	8004fca <_malloc_r+0xea>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	442b      	add	r3, r5
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	bb62      	cbnz	r2, 8004fbc <_malloc_r+0xdc>
 8004f62:	f8c8 7000 	str.w	r7, [r8]
 8004f66:	e00f      	b.n	8004f88 <_malloc_r+0xa8>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	d420      	bmi.n	8004fb0 <_malloc_r+0xd0>
 8004f6e:	2a0b      	cmp	r2, #11
 8004f70:	d917      	bls.n	8004fa2 <_malloc_r+0xc2>
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	6059      	strne	r1, [r3, #4]
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	bf08      	it	eq
 8004f80:	f8c8 1000 	streq.w	r1, [r8]
 8004f84:	5162      	str	r2, [r4, r5]
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f000 f82f 	bl	8004fec <__malloc_unlock>
 8004f8e:	f104 000b 	add.w	r0, r4, #11
 8004f92:	1d23      	adds	r3, r4, #4
 8004f94:	f020 0007 	bic.w	r0, r0, #7
 8004f98:	1ac2      	subs	r2, r0, r3
 8004f9a:	bf1c      	itt	ne
 8004f9c:	1a1b      	subne	r3, r3, r0
 8004f9e:	50a3      	strne	r3, [r4, r2]
 8004fa0:	e7af      	b.n	8004f02 <_malloc_r+0x22>
 8004fa2:	6862      	ldr	r2, [r4, #4]
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	bf0c      	ite	eq
 8004fa8:	f8c8 2000 	streq.w	r2, [r8]
 8004fac:	605a      	strne	r2, [r3, #4]
 8004fae:	e7eb      	b.n	8004f88 <_malloc_r+0xa8>
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	6864      	ldr	r4, [r4, #4]
 8004fb4:	e7ae      	b.n	8004f14 <_malloc_r+0x34>
 8004fb6:	463c      	mov	r4, r7
 8004fb8:	687f      	ldr	r7, [r7, #4]
 8004fba:	e7b6      	b.n	8004f2a <_malloc_r+0x4a>
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d1fb      	bne.n	8004fbc <_malloc_r+0xdc>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6053      	str	r3, [r2, #4]
 8004fc8:	e7de      	b.n	8004f88 <_malloc_r+0xa8>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	6033      	str	r3, [r6, #0]
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f000 f80c 	bl	8004fec <__malloc_unlock>
 8004fd4:	e794      	b.n	8004f00 <_malloc_r+0x20>
 8004fd6:	6005      	str	r5, [r0, #0]
 8004fd8:	e7d6      	b.n	8004f88 <_malloc_r+0xa8>
 8004fda:	bf00      	nop
 8004fdc:	20000340 	.word	0x20000340

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	@ (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff bf0e 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20000338 	.word	0x20000338

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	@ (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff bf09 	b.w	8004e04 <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	20000338 	.word	0x20000338

08004ff8 <__ssputs_r>:
 8004ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	688e      	ldr	r6, [r1, #8]
 8004ffe:	461f      	mov	r7, r3
 8005000:	42be      	cmp	r6, r7
 8005002:	680b      	ldr	r3, [r1, #0]
 8005004:	4682      	mov	sl, r0
 8005006:	460c      	mov	r4, r1
 8005008:	4690      	mov	r8, r2
 800500a:	d82d      	bhi.n	8005068 <__ssputs_r+0x70>
 800500c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005010:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005014:	d026      	beq.n	8005064 <__ssputs_r+0x6c>
 8005016:	6965      	ldr	r5, [r4, #20]
 8005018:	6909      	ldr	r1, [r1, #16]
 800501a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800501e:	eba3 0901 	sub.w	r9, r3, r1
 8005022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005026:	1c7b      	adds	r3, r7, #1
 8005028:	444b      	add	r3, r9
 800502a:	106d      	asrs	r5, r5, #1
 800502c:	429d      	cmp	r5, r3
 800502e:	bf38      	it	cc
 8005030:	461d      	movcc	r5, r3
 8005032:	0553      	lsls	r3, r2, #21
 8005034:	d527      	bpl.n	8005086 <__ssputs_r+0x8e>
 8005036:	4629      	mov	r1, r5
 8005038:	f7ff ff52 	bl	8004ee0 <_malloc_r>
 800503c:	4606      	mov	r6, r0
 800503e:	b360      	cbz	r0, 800509a <__ssputs_r+0xa2>
 8005040:	6921      	ldr	r1, [r4, #16]
 8005042:	464a      	mov	r2, r9
 8005044:	f000 fd58 	bl	8005af8 <memcpy>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800504e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	6126      	str	r6, [r4, #16]
 8005056:	6165      	str	r5, [r4, #20]
 8005058:	444e      	add	r6, r9
 800505a:	eba5 0509 	sub.w	r5, r5, r9
 800505e:	6026      	str	r6, [r4, #0]
 8005060:	60a5      	str	r5, [r4, #8]
 8005062:	463e      	mov	r6, r7
 8005064:	42be      	cmp	r6, r7
 8005066:	d900      	bls.n	800506a <__ssputs_r+0x72>
 8005068:	463e      	mov	r6, r7
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	4632      	mov	r2, r6
 800506e:	4641      	mov	r1, r8
 8005070:	f000 fcf6 	bl	8005a60 <memmove>
 8005074:	68a3      	ldr	r3, [r4, #8]
 8005076:	1b9b      	subs	r3, r3, r6
 8005078:	60a3      	str	r3, [r4, #8]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	4433      	add	r3, r6
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	2000      	movs	r0, #0
 8005082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005086:	462a      	mov	r2, r5
 8005088:	f000 fd44 	bl	8005b14 <_realloc_r>
 800508c:	4606      	mov	r6, r0
 800508e:	2800      	cmp	r0, #0
 8005090:	d1e0      	bne.n	8005054 <__ssputs_r+0x5c>
 8005092:	6921      	ldr	r1, [r4, #16]
 8005094:	4650      	mov	r0, sl
 8005096:	f7ff feb7 	bl	8004e08 <_free_r>
 800509a:	230c      	movs	r3, #12
 800509c:	f8ca 3000 	str.w	r3, [sl]
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e7e9      	b.n	8005082 <__ssputs_r+0x8a>
	...

080050b0 <_svfiprintf_r>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	4698      	mov	r8, r3
 80050b6:	898b      	ldrh	r3, [r1, #12]
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	b09d      	sub	sp, #116	@ 0x74
 80050bc:	4607      	mov	r7, r0
 80050be:	460d      	mov	r5, r1
 80050c0:	4614      	mov	r4, r2
 80050c2:	d510      	bpl.n	80050e6 <_svfiprintf_r+0x36>
 80050c4:	690b      	ldr	r3, [r1, #16]
 80050c6:	b973      	cbnz	r3, 80050e6 <_svfiprintf_r+0x36>
 80050c8:	2140      	movs	r1, #64	@ 0x40
 80050ca:	f7ff ff09 	bl	8004ee0 <_malloc_r>
 80050ce:	6028      	str	r0, [r5, #0]
 80050d0:	6128      	str	r0, [r5, #16]
 80050d2:	b930      	cbnz	r0, 80050e2 <_svfiprintf_r+0x32>
 80050d4:	230c      	movs	r3, #12
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	b01d      	add	sp, #116	@ 0x74
 80050de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e2:	2340      	movs	r3, #64	@ 0x40
 80050e4:	616b      	str	r3, [r5, #20]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ea:	2320      	movs	r3, #32
 80050ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f4:	2330      	movs	r3, #48	@ 0x30
 80050f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005294 <_svfiprintf_r+0x1e4>
 80050fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050fe:	f04f 0901 	mov.w	r9, #1
 8005102:	4623      	mov	r3, r4
 8005104:	469a      	mov	sl, r3
 8005106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800510a:	b10a      	cbz	r2, 8005110 <_svfiprintf_r+0x60>
 800510c:	2a25      	cmp	r2, #37	@ 0x25
 800510e:	d1f9      	bne.n	8005104 <_svfiprintf_r+0x54>
 8005110:	ebba 0b04 	subs.w	fp, sl, r4
 8005114:	d00b      	beq.n	800512e <_svfiprintf_r+0x7e>
 8005116:	465b      	mov	r3, fp
 8005118:	4622      	mov	r2, r4
 800511a:	4629      	mov	r1, r5
 800511c:	4638      	mov	r0, r7
 800511e:	f7ff ff6b 	bl	8004ff8 <__ssputs_r>
 8005122:	3001      	adds	r0, #1
 8005124:	f000 80a7 	beq.w	8005276 <_svfiprintf_r+0x1c6>
 8005128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800512a:	445a      	add	r2, fp
 800512c:	9209      	str	r2, [sp, #36]	@ 0x24
 800512e:	f89a 3000 	ldrb.w	r3, [sl]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 809f 	beq.w	8005276 <_svfiprintf_r+0x1c6>
 8005138:	2300      	movs	r3, #0
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005142:	f10a 0a01 	add.w	sl, sl, #1
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	9307      	str	r3, [sp, #28]
 800514a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800514e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005150:	4654      	mov	r4, sl
 8005152:	2205      	movs	r2, #5
 8005154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005158:	484e      	ldr	r0, [pc, #312]	@ (8005294 <_svfiprintf_r+0x1e4>)
 800515a:	f7fb f841 	bl	80001e0 <memchr>
 800515e:	9a04      	ldr	r2, [sp, #16]
 8005160:	b9d8      	cbnz	r0, 800519a <_svfiprintf_r+0xea>
 8005162:	06d0      	lsls	r0, r2, #27
 8005164:	bf44      	itt	mi
 8005166:	2320      	movmi	r3, #32
 8005168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800516c:	0711      	lsls	r1, r2, #28
 800516e:	bf44      	itt	mi
 8005170:	232b      	movmi	r3, #43	@ 0x2b
 8005172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005176:	f89a 3000 	ldrb.w	r3, [sl]
 800517a:	2b2a      	cmp	r3, #42	@ 0x2a
 800517c:	d015      	beq.n	80051aa <_svfiprintf_r+0xfa>
 800517e:	9a07      	ldr	r2, [sp, #28]
 8005180:	4654      	mov	r4, sl
 8005182:	2000      	movs	r0, #0
 8005184:	f04f 0c0a 	mov.w	ip, #10
 8005188:	4621      	mov	r1, r4
 800518a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800518e:	3b30      	subs	r3, #48	@ 0x30
 8005190:	2b09      	cmp	r3, #9
 8005192:	d94b      	bls.n	800522c <_svfiprintf_r+0x17c>
 8005194:	b1b0      	cbz	r0, 80051c4 <_svfiprintf_r+0x114>
 8005196:	9207      	str	r2, [sp, #28]
 8005198:	e014      	b.n	80051c4 <_svfiprintf_r+0x114>
 800519a:	eba0 0308 	sub.w	r3, r0, r8
 800519e:	fa09 f303 	lsl.w	r3, r9, r3
 80051a2:	4313      	orrs	r3, r2
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	46a2      	mov	sl, r4
 80051a8:	e7d2      	b.n	8005150 <_svfiprintf_r+0xa0>
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	1d19      	adds	r1, r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	9103      	str	r1, [sp, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bfbb      	ittet	lt
 80051b6:	425b      	neglt	r3, r3
 80051b8:	f042 0202 	orrlt.w	r2, r2, #2
 80051bc:	9307      	strge	r3, [sp, #28]
 80051be:	9307      	strlt	r3, [sp, #28]
 80051c0:	bfb8      	it	lt
 80051c2:	9204      	strlt	r2, [sp, #16]
 80051c4:	7823      	ldrb	r3, [r4, #0]
 80051c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80051c8:	d10a      	bne.n	80051e0 <_svfiprintf_r+0x130>
 80051ca:	7863      	ldrb	r3, [r4, #1]
 80051cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ce:	d132      	bne.n	8005236 <_svfiprintf_r+0x186>
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	9203      	str	r2, [sp, #12]
 80051d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051dc:	3402      	adds	r4, #2
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80052a4 <_svfiprintf_r+0x1f4>
 80051e4:	7821      	ldrb	r1, [r4, #0]
 80051e6:	2203      	movs	r2, #3
 80051e8:	4650      	mov	r0, sl
 80051ea:	f7fa fff9 	bl	80001e0 <memchr>
 80051ee:	b138      	cbz	r0, 8005200 <_svfiprintf_r+0x150>
 80051f0:	9b04      	ldr	r3, [sp, #16]
 80051f2:	eba0 000a 	sub.w	r0, r0, sl
 80051f6:	2240      	movs	r2, #64	@ 0x40
 80051f8:	4082      	lsls	r2, r0
 80051fa:	4313      	orrs	r3, r2
 80051fc:	3401      	adds	r4, #1
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005204:	4824      	ldr	r0, [pc, #144]	@ (8005298 <_svfiprintf_r+0x1e8>)
 8005206:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800520a:	2206      	movs	r2, #6
 800520c:	f7fa ffe8 	bl	80001e0 <memchr>
 8005210:	2800      	cmp	r0, #0
 8005212:	d036      	beq.n	8005282 <_svfiprintf_r+0x1d2>
 8005214:	4b21      	ldr	r3, [pc, #132]	@ (800529c <_svfiprintf_r+0x1ec>)
 8005216:	bb1b      	cbnz	r3, 8005260 <_svfiprintf_r+0x1b0>
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	3307      	adds	r3, #7
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	9303      	str	r3, [sp, #12]
 8005224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005226:	4433      	add	r3, r6
 8005228:	9309      	str	r3, [sp, #36]	@ 0x24
 800522a:	e76a      	b.n	8005102 <_svfiprintf_r+0x52>
 800522c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005230:	460c      	mov	r4, r1
 8005232:	2001      	movs	r0, #1
 8005234:	e7a8      	b.n	8005188 <_svfiprintf_r+0xd8>
 8005236:	2300      	movs	r3, #0
 8005238:	3401      	adds	r4, #1
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	4619      	mov	r1, r3
 800523e:	f04f 0c0a 	mov.w	ip, #10
 8005242:	4620      	mov	r0, r4
 8005244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005248:	3a30      	subs	r2, #48	@ 0x30
 800524a:	2a09      	cmp	r2, #9
 800524c:	d903      	bls.n	8005256 <_svfiprintf_r+0x1a6>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0c6      	beq.n	80051e0 <_svfiprintf_r+0x130>
 8005252:	9105      	str	r1, [sp, #20]
 8005254:	e7c4      	b.n	80051e0 <_svfiprintf_r+0x130>
 8005256:	fb0c 2101 	mla	r1, ip, r1, r2
 800525a:	4604      	mov	r4, r0
 800525c:	2301      	movs	r3, #1
 800525e:	e7f0      	b.n	8005242 <_svfiprintf_r+0x192>
 8005260:	ab03      	add	r3, sp, #12
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	462a      	mov	r2, r5
 8005266:	4b0e      	ldr	r3, [pc, #56]	@ (80052a0 <_svfiprintf_r+0x1f0>)
 8005268:	a904      	add	r1, sp, #16
 800526a:	4638      	mov	r0, r7
 800526c:	f3af 8000 	nop.w
 8005270:	1c42      	adds	r2, r0, #1
 8005272:	4606      	mov	r6, r0
 8005274:	d1d6      	bne.n	8005224 <_svfiprintf_r+0x174>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	065b      	lsls	r3, r3, #25
 800527a:	f53f af2d 	bmi.w	80050d8 <_svfiprintf_r+0x28>
 800527e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005280:	e72c      	b.n	80050dc <_svfiprintf_r+0x2c>
 8005282:	ab03      	add	r3, sp, #12
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	462a      	mov	r2, r5
 8005288:	4b05      	ldr	r3, [pc, #20]	@ (80052a0 <_svfiprintf_r+0x1f0>)
 800528a:	a904      	add	r1, sp, #16
 800528c:	4638      	mov	r0, r7
 800528e:	f000 f9bb 	bl	8005608 <_printf_i>
 8005292:	e7ed      	b.n	8005270 <_svfiprintf_r+0x1c0>
 8005294:	08005c14 	.word	0x08005c14
 8005298:	08005c1e 	.word	0x08005c1e
 800529c:	00000000 	.word	0x00000000
 80052a0:	08004ff9 	.word	0x08004ff9
 80052a4:	08005c1a 	.word	0x08005c1a

080052a8 <__sfputc_r>:
 80052a8:	6893      	ldr	r3, [r2, #8]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	b410      	push	{r4}
 80052b0:	6093      	str	r3, [r2, #8]
 80052b2:	da08      	bge.n	80052c6 <__sfputc_r+0x1e>
 80052b4:	6994      	ldr	r4, [r2, #24]
 80052b6:	42a3      	cmp	r3, r4
 80052b8:	db01      	blt.n	80052be <__sfputc_r+0x16>
 80052ba:	290a      	cmp	r1, #10
 80052bc:	d103      	bne.n	80052c6 <__sfputc_r+0x1e>
 80052be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c2:	f7ff bc7e 	b.w	8004bc2 <__swbuf_r>
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	1c58      	adds	r0, r3, #1
 80052ca:	6010      	str	r0, [r2, #0]
 80052cc:	7019      	strb	r1, [r3, #0]
 80052ce:	4608      	mov	r0, r1
 80052d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <__sfputs_r>:
 80052d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d8:	4606      	mov	r6, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	18d5      	adds	r5, r2, r3
 80052e0:	42ac      	cmp	r4, r5
 80052e2:	d101      	bne.n	80052e8 <__sfputs_r+0x12>
 80052e4:	2000      	movs	r0, #0
 80052e6:	e007      	b.n	80052f8 <__sfputs_r+0x22>
 80052e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ec:	463a      	mov	r2, r7
 80052ee:	4630      	mov	r0, r6
 80052f0:	f7ff ffda 	bl	80052a8 <__sfputc_r>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d1f3      	bne.n	80052e0 <__sfputs_r+0xa>
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052fc <_vfiprintf_r>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	460d      	mov	r5, r1
 8005302:	b09d      	sub	sp, #116	@ 0x74
 8005304:	4614      	mov	r4, r2
 8005306:	4698      	mov	r8, r3
 8005308:	4606      	mov	r6, r0
 800530a:	b118      	cbz	r0, 8005314 <_vfiprintf_r+0x18>
 800530c:	6a03      	ldr	r3, [r0, #32]
 800530e:	b90b      	cbnz	r3, 8005314 <_vfiprintf_r+0x18>
 8005310:	f7ff fb4c 	bl	80049ac <__sinit>
 8005314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005316:	07d9      	lsls	r1, r3, #31
 8005318:	d405      	bmi.n	8005326 <_vfiprintf_r+0x2a>
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d402      	bmi.n	8005326 <_vfiprintf_r+0x2a>
 8005320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005322:	f7ff fd6e 	bl	8004e02 <__retarget_lock_acquire_recursive>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	071b      	lsls	r3, r3, #28
 800532a:	d501      	bpl.n	8005330 <_vfiprintf_r+0x34>
 800532c:	692b      	ldr	r3, [r5, #16]
 800532e:	b99b      	cbnz	r3, 8005358 <_vfiprintf_r+0x5c>
 8005330:	4629      	mov	r1, r5
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff fc84 	bl	8004c40 <__swsetup_r>
 8005338:	b170      	cbz	r0, 8005358 <_vfiprintf_r+0x5c>
 800533a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800533c:	07dc      	lsls	r4, r3, #31
 800533e:	d504      	bpl.n	800534a <_vfiprintf_r+0x4e>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b01d      	add	sp, #116	@ 0x74
 8005346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	0598      	lsls	r0, r3, #22
 800534e:	d4f7      	bmi.n	8005340 <_vfiprintf_r+0x44>
 8005350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005352:	f7ff fd57 	bl	8004e04 <__retarget_lock_release_recursive>
 8005356:	e7f3      	b.n	8005340 <_vfiprintf_r+0x44>
 8005358:	2300      	movs	r3, #0
 800535a:	9309      	str	r3, [sp, #36]	@ 0x24
 800535c:	2320      	movs	r3, #32
 800535e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005362:	f8cd 800c 	str.w	r8, [sp, #12]
 8005366:	2330      	movs	r3, #48	@ 0x30
 8005368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005518 <_vfiprintf_r+0x21c>
 800536c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005370:	f04f 0901 	mov.w	r9, #1
 8005374:	4623      	mov	r3, r4
 8005376:	469a      	mov	sl, r3
 8005378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800537c:	b10a      	cbz	r2, 8005382 <_vfiprintf_r+0x86>
 800537e:	2a25      	cmp	r2, #37	@ 0x25
 8005380:	d1f9      	bne.n	8005376 <_vfiprintf_r+0x7a>
 8005382:	ebba 0b04 	subs.w	fp, sl, r4
 8005386:	d00b      	beq.n	80053a0 <_vfiprintf_r+0xa4>
 8005388:	465b      	mov	r3, fp
 800538a:	4622      	mov	r2, r4
 800538c:	4629      	mov	r1, r5
 800538e:	4630      	mov	r0, r6
 8005390:	f7ff ffa1 	bl	80052d6 <__sfputs_r>
 8005394:	3001      	adds	r0, #1
 8005396:	f000 80a7 	beq.w	80054e8 <_vfiprintf_r+0x1ec>
 800539a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800539c:	445a      	add	r2, fp
 800539e:	9209      	str	r2, [sp, #36]	@ 0x24
 80053a0:	f89a 3000 	ldrb.w	r3, [sl]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 809f 	beq.w	80054e8 <_vfiprintf_r+0x1ec>
 80053aa:	2300      	movs	r3, #0
 80053ac:	f04f 32ff 	mov.w	r2, #4294967295
 80053b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b4:	f10a 0a01 	add.w	sl, sl, #1
 80053b8:	9304      	str	r3, [sp, #16]
 80053ba:	9307      	str	r3, [sp, #28]
 80053bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80053c2:	4654      	mov	r4, sl
 80053c4:	2205      	movs	r2, #5
 80053c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ca:	4853      	ldr	r0, [pc, #332]	@ (8005518 <_vfiprintf_r+0x21c>)
 80053cc:	f7fa ff08 	bl	80001e0 <memchr>
 80053d0:	9a04      	ldr	r2, [sp, #16]
 80053d2:	b9d8      	cbnz	r0, 800540c <_vfiprintf_r+0x110>
 80053d4:	06d1      	lsls	r1, r2, #27
 80053d6:	bf44      	itt	mi
 80053d8:	2320      	movmi	r3, #32
 80053da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053de:	0713      	lsls	r3, r2, #28
 80053e0:	bf44      	itt	mi
 80053e2:	232b      	movmi	r3, #43	@ 0x2b
 80053e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053e8:	f89a 3000 	ldrb.w	r3, [sl]
 80053ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ee:	d015      	beq.n	800541c <_vfiprintf_r+0x120>
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	4654      	mov	r4, sl
 80053f4:	2000      	movs	r0, #0
 80053f6:	f04f 0c0a 	mov.w	ip, #10
 80053fa:	4621      	mov	r1, r4
 80053fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005400:	3b30      	subs	r3, #48	@ 0x30
 8005402:	2b09      	cmp	r3, #9
 8005404:	d94b      	bls.n	800549e <_vfiprintf_r+0x1a2>
 8005406:	b1b0      	cbz	r0, 8005436 <_vfiprintf_r+0x13a>
 8005408:	9207      	str	r2, [sp, #28]
 800540a:	e014      	b.n	8005436 <_vfiprintf_r+0x13a>
 800540c:	eba0 0308 	sub.w	r3, r0, r8
 8005410:	fa09 f303 	lsl.w	r3, r9, r3
 8005414:	4313      	orrs	r3, r2
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	46a2      	mov	sl, r4
 800541a:	e7d2      	b.n	80053c2 <_vfiprintf_r+0xc6>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	1d19      	adds	r1, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	9103      	str	r1, [sp, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	bfbb      	ittet	lt
 8005428:	425b      	neglt	r3, r3
 800542a:	f042 0202 	orrlt.w	r2, r2, #2
 800542e:	9307      	strge	r3, [sp, #28]
 8005430:	9307      	strlt	r3, [sp, #28]
 8005432:	bfb8      	it	lt
 8005434:	9204      	strlt	r2, [sp, #16]
 8005436:	7823      	ldrb	r3, [r4, #0]
 8005438:	2b2e      	cmp	r3, #46	@ 0x2e
 800543a:	d10a      	bne.n	8005452 <_vfiprintf_r+0x156>
 800543c:	7863      	ldrb	r3, [r4, #1]
 800543e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005440:	d132      	bne.n	80054a8 <_vfiprintf_r+0x1ac>
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	9203      	str	r2, [sp, #12]
 800544a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800544e:	3402      	adds	r4, #2
 8005450:	9305      	str	r3, [sp, #20]
 8005452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005528 <_vfiprintf_r+0x22c>
 8005456:	7821      	ldrb	r1, [r4, #0]
 8005458:	2203      	movs	r2, #3
 800545a:	4650      	mov	r0, sl
 800545c:	f7fa fec0 	bl	80001e0 <memchr>
 8005460:	b138      	cbz	r0, 8005472 <_vfiprintf_r+0x176>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	eba0 000a 	sub.w	r0, r0, sl
 8005468:	2240      	movs	r2, #64	@ 0x40
 800546a:	4082      	lsls	r2, r0
 800546c:	4313      	orrs	r3, r2
 800546e:	3401      	adds	r4, #1
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005476:	4829      	ldr	r0, [pc, #164]	@ (800551c <_vfiprintf_r+0x220>)
 8005478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800547c:	2206      	movs	r2, #6
 800547e:	f7fa feaf 	bl	80001e0 <memchr>
 8005482:	2800      	cmp	r0, #0
 8005484:	d03f      	beq.n	8005506 <_vfiprintf_r+0x20a>
 8005486:	4b26      	ldr	r3, [pc, #152]	@ (8005520 <_vfiprintf_r+0x224>)
 8005488:	bb1b      	cbnz	r3, 80054d2 <_vfiprintf_r+0x1d6>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	3307      	adds	r3, #7
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	3308      	adds	r3, #8
 8005494:	9303      	str	r3, [sp, #12]
 8005496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005498:	443b      	add	r3, r7
 800549a:	9309      	str	r3, [sp, #36]	@ 0x24
 800549c:	e76a      	b.n	8005374 <_vfiprintf_r+0x78>
 800549e:	fb0c 3202 	mla	r2, ip, r2, r3
 80054a2:	460c      	mov	r4, r1
 80054a4:	2001      	movs	r0, #1
 80054a6:	e7a8      	b.n	80053fa <_vfiprintf_r+0xfe>
 80054a8:	2300      	movs	r3, #0
 80054aa:	3401      	adds	r4, #1
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	4619      	mov	r1, r3
 80054b0:	f04f 0c0a 	mov.w	ip, #10
 80054b4:	4620      	mov	r0, r4
 80054b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ba:	3a30      	subs	r2, #48	@ 0x30
 80054bc:	2a09      	cmp	r2, #9
 80054be:	d903      	bls.n	80054c8 <_vfiprintf_r+0x1cc>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0c6      	beq.n	8005452 <_vfiprintf_r+0x156>
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	e7c4      	b.n	8005452 <_vfiprintf_r+0x156>
 80054c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054cc:	4604      	mov	r4, r0
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7f0      	b.n	80054b4 <_vfiprintf_r+0x1b8>
 80054d2:	ab03      	add	r3, sp, #12
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	462a      	mov	r2, r5
 80054d8:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <_vfiprintf_r+0x228>)
 80054da:	a904      	add	r1, sp, #16
 80054dc:	4630      	mov	r0, r6
 80054de:	f3af 8000 	nop.w
 80054e2:	4607      	mov	r7, r0
 80054e4:	1c78      	adds	r0, r7, #1
 80054e6:	d1d6      	bne.n	8005496 <_vfiprintf_r+0x19a>
 80054e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ea:	07d9      	lsls	r1, r3, #31
 80054ec:	d405      	bmi.n	80054fa <_vfiprintf_r+0x1fe>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	059a      	lsls	r2, r3, #22
 80054f2:	d402      	bmi.n	80054fa <_vfiprintf_r+0x1fe>
 80054f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054f6:	f7ff fc85 	bl	8004e04 <__retarget_lock_release_recursive>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	065b      	lsls	r3, r3, #25
 80054fe:	f53f af1f 	bmi.w	8005340 <_vfiprintf_r+0x44>
 8005502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005504:	e71e      	b.n	8005344 <_vfiprintf_r+0x48>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <_vfiprintf_r+0x228>)
 800550e:	a904      	add	r1, sp, #16
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f879 	bl	8005608 <_printf_i>
 8005516:	e7e4      	b.n	80054e2 <_vfiprintf_r+0x1e6>
 8005518:	08005c14 	.word	0x08005c14
 800551c:	08005c1e 	.word	0x08005c1e
 8005520:	00000000 	.word	0x00000000
 8005524:	080052d7 	.word	0x080052d7
 8005528:	08005c1a 	.word	0x08005c1a

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4698      	mov	r8, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800553c:	4293      	cmp	r3, r2
 800553e:	bfb8      	it	lt
 8005540:	4613      	movlt	r3, r2
 8005542:	6033      	str	r3, [r6, #0]
 8005544:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005548:	4607      	mov	r7, r0
 800554a:	460c      	mov	r4, r1
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc26      	bgt.n	80055c2 <_printf_common+0x96>
 8005574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	3b00      	subs	r3, #0
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d42b      	bmi.n	80055dc <_printf_common+0xb0>
 8005584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005588:	4641      	mov	r1, r8
 800558a:	4638      	mov	r0, r7
 800558c:	47c8      	blx	r9
 800558e:	3001      	adds	r0, #1
 8005590:	d01e      	beq.n	80055d0 <_printf_common+0xa4>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf02      	ittt	eq
 800559e:	68e5      	ldreq	r5, [r4, #12]
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	1aed      	subeq	r5, r5, r3
 80055a4:	68a3      	ldr	r3, [r4, #8]
 80055a6:	bf0c      	ite	eq
 80055a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ac:	2500      	movne	r5, #0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	bfc4      	itt	gt
 80055b2:	1a9b      	subgt	r3, r3, r2
 80055b4:	18ed      	addgt	r5, r5, r3
 80055b6:	2600      	movs	r6, #0
 80055b8:	341a      	adds	r4, #26
 80055ba:	42b5      	cmp	r5, r6
 80055bc:	d11a      	bne.n	80055f4 <_printf_common+0xc8>
 80055be:	2000      	movs	r0, #0
 80055c0:	e008      	b.n	80055d4 <_printf_common+0xa8>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4652      	mov	r2, sl
 80055c6:	4641      	mov	r1, r8
 80055c8:	4638      	mov	r0, r7
 80055ca:	47c8      	blx	r9
 80055cc:	3001      	adds	r0, #1
 80055ce:	d103      	bne.n	80055d8 <_printf_common+0xac>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	3501      	adds	r5, #1
 80055da:	e7c6      	b.n	800556a <_printf_common+0x3e>
 80055dc:	18e1      	adds	r1, r4, r3
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	2030      	movs	r0, #48	@ 0x30
 80055e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055e6:	4422      	add	r2, r4
 80055e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055f0:	3302      	adds	r3, #2
 80055f2:	e7c7      	b.n	8005584 <_printf_common+0x58>
 80055f4:	2301      	movs	r3, #1
 80055f6:	4622      	mov	r2, r4
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c8      	blx	r9
 80055fe:	3001      	adds	r0, #1
 8005600:	d0e6      	beq.n	80055d0 <_printf_common+0xa4>
 8005602:	3601      	adds	r6, #1
 8005604:	e7d9      	b.n	80055ba <_printf_common+0x8e>
	...

08005608 <_printf_i>:
 8005608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	7e0f      	ldrb	r7, [r1, #24]
 800560e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005610:	2f78      	cmp	r7, #120	@ 0x78
 8005612:	4691      	mov	r9, r2
 8005614:	4680      	mov	r8, r0
 8005616:	460c      	mov	r4, r1
 8005618:	469a      	mov	sl, r3
 800561a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800561e:	d807      	bhi.n	8005630 <_printf_i+0x28>
 8005620:	2f62      	cmp	r7, #98	@ 0x62
 8005622:	d80a      	bhi.n	800563a <_printf_i+0x32>
 8005624:	2f00      	cmp	r7, #0
 8005626:	f000 80d1 	beq.w	80057cc <_printf_i+0x1c4>
 800562a:	2f58      	cmp	r7, #88	@ 0x58
 800562c:	f000 80b8 	beq.w	80057a0 <_printf_i+0x198>
 8005630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005638:	e03a      	b.n	80056b0 <_printf_i+0xa8>
 800563a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800563e:	2b15      	cmp	r3, #21
 8005640:	d8f6      	bhi.n	8005630 <_printf_i+0x28>
 8005642:	a101      	add	r1, pc, #4	@ (adr r1, 8005648 <_printf_i+0x40>)
 8005644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005648:	080056a1 	.word	0x080056a1
 800564c:	080056b5 	.word	0x080056b5
 8005650:	08005631 	.word	0x08005631
 8005654:	08005631 	.word	0x08005631
 8005658:	08005631 	.word	0x08005631
 800565c:	08005631 	.word	0x08005631
 8005660:	080056b5 	.word	0x080056b5
 8005664:	08005631 	.word	0x08005631
 8005668:	08005631 	.word	0x08005631
 800566c:	08005631 	.word	0x08005631
 8005670:	08005631 	.word	0x08005631
 8005674:	080057b3 	.word	0x080057b3
 8005678:	080056df 	.word	0x080056df
 800567c:	0800576d 	.word	0x0800576d
 8005680:	08005631 	.word	0x08005631
 8005684:	08005631 	.word	0x08005631
 8005688:	080057d5 	.word	0x080057d5
 800568c:	08005631 	.word	0x08005631
 8005690:	080056df 	.word	0x080056df
 8005694:	08005631 	.word	0x08005631
 8005698:	08005631 	.word	0x08005631
 800569c:	08005775 	.word	0x08005775
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6032      	str	r2, [r6, #0]
 80056a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b0:	2301      	movs	r3, #1
 80056b2:	e09c      	b.n	80057ee <_printf_i+0x1e6>
 80056b4:	6833      	ldr	r3, [r6, #0]
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	6031      	str	r1, [r6, #0]
 80056bc:	0606      	lsls	r6, r0, #24
 80056be:	d501      	bpl.n	80056c4 <_printf_i+0xbc>
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	e003      	b.n	80056cc <_printf_i+0xc4>
 80056c4:	0645      	lsls	r5, r0, #25
 80056c6:	d5fb      	bpl.n	80056c0 <_printf_i+0xb8>
 80056c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	da03      	bge.n	80056d8 <_printf_i+0xd0>
 80056d0:	232d      	movs	r3, #45	@ 0x2d
 80056d2:	426d      	negs	r5, r5
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056d8:	4858      	ldr	r0, [pc, #352]	@ (800583c <_printf_i+0x234>)
 80056da:	230a      	movs	r3, #10
 80056dc:	e011      	b.n	8005702 <_printf_i+0xfa>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	6833      	ldr	r3, [r6, #0]
 80056e2:	0608      	lsls	r0, r1, #24
 80056e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80056e8:	d402      	bmi.n	80056f0 <_printf_i+0xe8>
 80056ea:	0649      	lsls	r1, r1, #25
 80056ec:	bf48      	it	mi
 80056ee:	b2ad      	uxthmi	r5, r5
 80056f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80056f2:	4852      	ldr	r0, [pc, #328]	@ (800583c <_printf_i+0x234>)
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	bf14      	ite	ne
 80056f8:	230a      	movne	r3, #10
 80056fa:	2308      	moveq	r3, #8
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005702:	6866      	ldr	r6, [r4, #4]
 8005704:	60a6      	str	r6, [r4, #8]
 8005706:	2e00      	cmp	r6, #0
 8005708:	db05      	blt.n	8005716 <_printf_i+0x10e>
 800570a:	6821      	ldr	r1, [r4, #0]
 800570c:	432e      	orrs	r6, r5
 800570e:	f021 0104 	bic.w	r1, r1, #4
 8005712:	6021      	str	r1, [r4, #0]
 8005714:	d04b      	beq.n	80057ae <_printf_i+0x1a6>
 8005716:	4616      	mov	r6, r2
 8005718:	fbb5 f1f3 	udiv	r1, r5, r3
 800571c:	fb03 5711 	mls	r7, r3, r1, r5
 8005720:	5dc7      	ldrb	r7, [r0, r7]
 8005722:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005726:	462f      	mov	r7, r5
 8005728:	42bb      	cmp	r3, r7
 800572a:	460d      	mov	r5, r1
 800572c:	d9f4      	bls.n	8005718 <_printf_i+0x110>
 800572e:	2b08      	cmp	r3, #8
 8005730:	d10b      	bne.n	800574a <_printf_i+0x142>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	07df      	lsls	r7, r3, #31
 8005736:	d508      	bpl.n	800574a <_printf_i+0x142>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	6861      	ldr	r1, [r4, #4]
 800573c:	4299      	cmp	r1, r3
 800573e:	bfde      	ittt	le
 8005740:	2330      	movle	r3, #48	@ 0x30
 8005742:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005746:	f106 36ff 	addle.w	r6, r6, #4294967295
 800574a:	1b92      	subs	r2, r2, r6
 800574c:	6122      	str	r2, [r4, #16]
 800574e:	f8cd a000 	str.w	sl, [sp]
 8005752:	464b      	mov	r3, r9
 8005754:	aa03      	add	r2, sp, #12
 8005756:	4621      	mov	r1, r4
 8005758:	4640      	mov	r0, r8
 800575a:	f7ff fee7 	bl	800552c <_printf_common>
 800575e:	3001      	adds	r0, #1
 8005760:	d14a      	bne.n	80057f8 <_printf_i+0x1f0>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	b004      	add	sp, #16
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	f043 0320 	orr.w	r3, r3, #32
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	4832      	ldr	r0, [pc, #200]	@ (8005840 <_printf_i+0x238>)
 8005776:	2778      	movs	r7, #120	@ 0x78
 8005778:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	061f      	lsls	r7, r3, #24
 8005782:	f851 5b04 	ldr.w	r5, [r1], #4
 8005786:	d402      	bmi.n	800578e <_printf_i+0x186>
 8005788:	065f      	lsls	r7, r3, #25
 800578a:	bf48      	it	mi
 800578c:	b2ad      	uxthmi	r5, r5
 800578e:	6031      	str	r1, [r6, #0]
 8005790:	07d9      	lsls	r1, r3, #31
 8005792:	bf44      	itt	mi
 8005794:	f043 0320 	orrmi.w	r3, r3, #32
 8005798:	6023      	strmi	r3, [r4, #0]
 800579a:	b11d      	cbz	r5, 80057a4 <_printf_i+0x19c>
 800579c:	2310      	movs	r3, #16
 800579e:	e7ad      	b.n	80056fc <_printf_i+0xf4>
 80057a0:	4826      	ldr	r0, [pc, #152]	@ (800583c <_printf_i+0x234>)
 80057a2:	e7e9      	b.n	8005778 <_printf_i+0x170>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	e7f6      	b.n	800579c <_printf_i+0x194>
 80057ae:	4616      	mov	r6, r2
 80057b0:	e7bd      	b.n	800572e <_printf_i+0x126>
 80057b2:	6833      	ldr	r3, [r6, #0]
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	6961      	ldr	r1, [r4, #20]
 80057b8:	1d18      	adds	r0, r3, #4
 80057ba:	6030      	str	r0, [r6, #0]
 80057bc:	062e      	lsls	r6, r5, #24
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	d501      	bpl.n	80057c6 <_printf_i+0x1be>
 80057c2:	6019      	str	r1, [r3, #0]
 80057c4:	e002      	b.n	80057cc <_printf_i+0x1c4>
 80057c6:	0668      	lsls	r0, r5, #25
 80057c8:	d5fb      	bpl.n	80057c2 <_printf_i+0x1ba>
 80057ca:	8019      	strh	r1, [r3, #0]
 80057cc:	2300      	movs	r3, #0
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	4616      	mov	r6, r2
 80057d2:	e7bc      	b.n	800574e <_printf_i+0x146>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	6032      	str	r2, [r6, #0]
 80057da:	681e      	ldr	r6, [r3, #0]
 80057dc:	6862      	ldr	r2, [r4, #4]
 80057de:	2100      	movs	r1, #0
 80057e0:	4630      	mov	r0, r6
 80057e2:	f7fa fcfd 	bl	80001e0 <memchr>
 80057e6:	b108      	cbz	r0, 80057ec <_printf_i+0x1e4>
 80057e8:	1b80      	subs	r0, r0, r6
 80057ea:	6060      	str	r0, [r4, #4]
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	2300      	movs	r3, #0
 80057f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057f6:	e7aa      	b.n	800574e <_printf_i+0x146>
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	4632      	mov	r2, r6
 80057fc:	4649      	mov	r1, r9
 80057fe:	4640      	mov	r0, r8
 8005800:	47d0      	blx	sl
 8005802:	3001      	adds	r0, #1
 8005804:	d0ad      	beq.n	8005762 <_printf_i+0x15a>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	079b      	lsls	r3, r3, #30
 800580a:	d413      	bmi.n	8005834 <_printf_i+0x22c>
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	4298      	cmp	r0, r3
 8005812:	bfb8      	it	lt
 8005814:	4618      	movlt	r0, r3
 8005816:	e7a6      	b.n	8005766 <_printf_i+0x15e>
 8005818:	2301      	movs	r3, #1
 800581a:	4632      	mov	r2, r6
 800581c:	4649      	mov	r1, r9
 800581e:	4640      	mov	r0, r8
 8005820:	47d0      	blx	sl
 8005822:	3001      	adds	r0, #1
 8005824:	d09d      	beq.n	8005762 <_printf_i+0x15a>
 8005826:	3501      	adds	r5, #1
 8005828:	68e3      	ldr	r3, [r4, #12]
 800582a:	9903      	ldr	r1, [sp, #12]
 800582c:	1a5b      	subs	r3, r3, r1
 800582e:	42ab      	cmp	r3, r5
 8005830:	dcf2      	bgt.n	8005818 <_printf_i+0x210>
 8005832:	e7eb      	b.n	800580c <_printf_i+0x204>
 8005834:	2500      	movs	r5, #0
 8005836:	f104 0619 	add.w	r6, r4, #25
 800583a:	e7f5      	b.n	8005828 <_printf_i+0x220>
 800583c:	08005c25 	.word	0x08005c25
 8005840:	08005c36 	.word	0x08005c36

08005844 <__sflush_r>:
 8005844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	0716      	lsls	r6, r2, #28
 800584e:	4605      	mov	r5, r0
 8005850:	460c      	mov	r4, r1
 8005852:	d454      	bmi.n	80058fe <__sflush_r+0xba>
 8005854:	684b      	ldr	r3, [r1, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dc02      	bgt.n	8005860 <__sflush_r+0x1c>
 800585a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd48      	ble.n	80058f2 <__sflush_r+0xae>
 8005860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005862:	2e00      	cmp	r6, #0
 8005864:	d045      	beq.n	80058f2 <__sflush_r+0xae>
 8005866:	2300      	movs	r3, #0
 8005868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800586c:	682f      	ldr	r7, [r5, #0]
 800586e:	6a21      	ldr	r1, [r4, #32]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	d030      	beq.n	80058d6 <__sflush_r+0x92>
 8005874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	0759      	lsls	r1, r3, #29
 800587a:	d505      	bpl.n	8005888 <__sflush_r+0x44>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005882:	b10b      	cbz	r3, 8005888 <__sflush_r+0x44>
 8005884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	d106      	bne.n	80058a6 <__sflush_r+0x62>
 8005898:	6829      	ldr	r1, [r5, #0]
 800589a:	291d      	cmp	r1, #29
 800589c:	d82b      	bhi.n	80058f6 <__sflush_r+0xb2>
 800589e:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <__sflush_r+0x104>)
 80058a0:	40ca      	lsrs	r2, r1
 80058a2:	07d6      	lsls	r6, r2, #31
 80058a4:	d527      	bpl.n	80058f6 <__sflush_r+0xb2>
 80058a6:	2200      	movs	r2, #0
 80058a8:	6062      	str	r2, [r4, #4]
 80058aa:	04d9      	lsls	r1, r3, #19
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	d504      	bpl.n	80058bc <__sflush_r+0x78>
 80058b2:	1c42      	adds	r2, r0, #1
 80058b4:	d101      	bne.n	80058ba <__sflush_r+0x76>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b903      	cbnz	r3, 80058bc <__sflush_r+0x78>
 80058ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80058bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058be:	602f      	str	r7, [r5, #0]
 80058c0:	b1b9      	cbz	r1, 80058f2 <__sflush_r+0xae>
 80058c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d002      	beq.n	80058d0 <__sflush_r+0x8c>
 80058ca:	4628      	mov	r0, r5
 80058cc:	f7ff fa9c 	bl	8004e08 <_free_r>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058d4:	e00d      	b.n	80058f2 <__sflush_r+0xae>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	4602      	mov	r2, r0
 80058de:	1c50      	adds	r0, r2, #1
 80058e0:	d1c9      	bne.n	8005876 <__sflush_r+0x32>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0c6      	beq.n	8005876 <__sflush_r+0x32>
 80058e8:	2b1d      	cmp	r3, #29
 80058ea:	d001      	beq.n	80058f0 <__sflush_r+0xac>
 80058ec:	2b16      	cmp	r3, #22
 80058ee:	d11e      	bne.n	800592e <__sflush_r+0xea>
 80058f0:	602f      	str	r7, [r5, #0]
 80058f2:	2000      	movs	r0, #0
 80058f4:	e022      	b.n	800593c <__sflush_r+0xf8>
 80058f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	e01b      	b.n	8005936 <__sflush_r+0xf2>
 80058fe:	690f      	ldr	r7, [r1, #16]
 8005900:	2f00      	cmp	r7, #0
 8005902:	d0f6      	beq.n	80058f2 <__sflush_r+0xae>
 8005904:	0793      	lsls	r3, r2, #30
 8005906:	680e      	ldr	r6, [r1, #0]
 8005908:	bf08      	it	eq
 800590a:	694b      	ldreq	r3, [r1, #20]
 800590c:	600f      	str	r7, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	2300      	movne	r3, #0
 8005912:	eba6 0807 	sub.w	r8, r6, r7
 8005916:	608b      	str	r3, [r1, #8]
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	dde9      	ble.n	80058f2 <__sflush_r+0xae>
 800591e:	6a21      	ldr	r1, [r4, #32]
 8005920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005922:	4643      	mov	r3, r8
 8005924:	463a      	mov	r2, r7
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	2800      	cmp	r0, #0
 800592c:	dc08      	bgt.n	8005940 <__sflush_r+0xfc>
 800592e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	4407      	add	r7, r0
 8005942:	eba8 0800 	sub.w	r8, r8, r0
 8005946:	e7e7      	b.n	8005918 <__sflush_r+0xd4>
 8005948:	20400001 	.word	0x20400001

0800594c <_fflush_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b913      	cbnz	r3, 800595c <_fflush_r+0x10>
 8005956:	2500      	movs	r5, #0
 8005958:	4628      	mov	r0, r5
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	b118      	cbz	r0, 8005966 <_fflush_r+0x1a>
 800595e:	6a03      	ldr	r3, [r0, #32]
 8005960:	b90b      	cbnz	r3, 8005966 <_fflush_r+0x1a>
 8005962:	f7ff f823 	bl	80049ac <__sinit>
 8005966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f3      	beq.n	8005956 <_fflush_r+0xa>
 800596e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005970:	07d0      	lsls	r0, r2, #31
 8005972:	d404      	bmi.n	800597e <_fflush_r+0x32>
 8005974:	0599      	lsls	r1, r3, #22
 8005976:	d402      	bmi.n	800597e <_fflush_r+0x32>
 8005978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597a:	f7ff fa42 	bl	8004e02 <__retarget_lock_acquire_recursive>
 800597e:	4628      	mov	r0, r5
 8005980:	4621      	mov	r1, r4
 8005982:	f7ff ff5f 	bl	8005844 <__sflush_r>
 8005986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005988:	07da      	lsls	r2, r3, #31
 800598a:	4605      	mov	r5, r0
 800598c:	d4e4      	bmi.n	8005958 <_fflush_r+0xc>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d4e1      	bmi.n	8005958 <_fflush_r+0xc>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f7ff fa35 	bl	8004e04 <__retarget_lock_release_recursive>
 800599a:	e7dd      	b.n	8005958 <_fflush_r+0xc>

0800599c <__swhatbuf_r>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2900      	cmp	r1, #0
 80059a6:	b096      	sub	sp, #88	@ 0x58
 80059a8:	4615      	mov	r5, r2
 80059aa:	461e      	mov	r6, r3
 80059ac:	da0d      	bge.n	80059ca <__swhatbuf_r+0x2e>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2340      	movne	r3, #64	@ 0x40
 80059bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059c0:	2000      	movs	r0, #0
 80059c2:	6031      	str	r1, [r6, #0]
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	b016      	add	sp, #88	@ 0x58
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
 80059ca:	466a      	mov	r2, sp
 80059cc:	f000 f862 	bl	8005a94 <_fstat_r>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	dbec      	blt.n	80059ae <__swhatbuf_r+0x12>
 80059d4:	9901      	ldr	r1, [sp, #4]
 80059d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059de:	4259      	negs	r1, r3
 80059e0:	4159      	adcs	r1, r3
 80059e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059e6:	e7eb      	b.n	80059c0 <__swhatbuf_r+0x24>

080059e8 <__smakebuf_r>:
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ec:	079d      	lsls	r5, r3, #30
 80059ee:	4606      	mov	r6, r0
 80059f0:	460c      	mov	r4, r1
 80059f2:	d507      	bpl.n	8005a04 <__smakebuf_r+0x1c>
 80059f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	2301      	movs	r3, #1
 80059fe:	6163      	str	r3, [r4, #20]
 8005a00:	b003      	add	sp, #12
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	ab01      	add	r3, sp, #4
 8005a06:	466a      	mov	r2, sp
 8005a08:	f7ff ffc8 	bl	800599c <__swhatbuf_r>
 8005a0c:	9f00      	ldr	r7, [sp, #0]
 8005a0e:	4605      	mov	r5, r0
 8005a10:	4639      	mov	r1, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff fa64 	bl	8004ee0 <_malloc_r>
 8005a18:	b948      	cbnz	r0, 8005a2e <__smakebuf_r+0x46>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	059a      	lsls	r2, r3, #22
 8005a20:	d4ee      	bmi.n	8005a00 <__smakebuf_r+0x18>
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	f043 0302 	orr.w	r3, r3, #2
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	e7e2      	b.n	80059f4 <__smakebuf_r+0xc>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	6020      	str	r0, [r4, #0]
 8005a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a36:	81a3      	strh	r3, [r4, #12]
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a3e:	b15b      	cbz	r3, 8005a58 <__smakebuf_r+0x70>
 8005a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a44:	4630      	mov	r0, r6
 8005a46:	f000 f837 	bl	8005ab8 <_isatty_r>
 8005a4a:	b128      	cbz	r0, 8005a58 <__smakebuf_r+0x70>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	81a3      	strh	r3, [r4, #12]
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	431d      	orrs	r5, r3
 8005a5c:	81a5      	strh	r5, [r4, #12]
 8005a5e:	e7cf      	b.n	8005a00 <__smakebuf_r+0x18>

08005a60 <memmove>:
 8005a60:	4288      	cmp	r0, r1
 8005a62:	b510      	push	{r4, lr}
 8005a64:	eb01 0402 	add.w	r4, r1, r2
 8005a68:	d902      	bls.n	8005a70 <memmove+0x10>
 8005a6a:	4284      	cmp	r4, r0
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	d807      	bhi.n	8005a80 <memmove+0x20>
 8005a70:	1e43      	subs	r3, r0, #1
 8005a72:	42a1      	cmp	r1, r4
 8005a74:	d008      	beq.n	8005a88 <memmove+0x28>
 8005a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a7e:	e7f8      	b.n	8005a72 <memmove+0x12>
 8005a80:	4402      	add	r2, r0
 8005a82:	4601      	mov	r1, r0
 8005a84:	428a      	cmp	r2, r1
 8005a86:	d100      	bne.n	8005a8a <memmove+0x2a>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a92:	e7f7      	b.n	8005a84 <memmove+0x24>

08005a94 <_fstat_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_fstat_r+0x20>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	f7fb fc8c 	bl	80013be <_fstat>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	d102      	bne.n	8005ab0 <_fstat_r+0x1c>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	b103      	cbz	r3, 8005ab0 <_fstat_r+0x1c>
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000334 	.word	0x20000334

08005ab8 <_isatty_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d06      	ldr	r5, [pc, #24]	@ (8005ad4 <_isatty_r+0x1c>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	f7fb fc8b 	bl	80013de <_isatty>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_isatty_r+0x1a>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_isatty_r+0x1a>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20000334 	.word	0x20000334

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d06      	ldr	r5, [pc, #24]	@ (8005af4 <_sbrk_r+0x1c>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f7fb fc94 	bl	8001410 <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20000334 	.word	0x20000334

08005af8 <memcpy>:
 8005af8:	440a      	add	r2, r1
 8005afa:	4291      	cmp	r1, r2
 8005afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b00:	d100      	bne.n	8005b04 <memcpy+0xc>
 8005b02:	4770      	bx	lr
 8005b04:	b510      	push	{r4, lr}
 8005b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	d1f9      	bne.n	8005b06 <memcpy+0xe>
 8005b12:	bd10      	pop	{r4, pc}

08005b14 <_realloc_r>:
 8005b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b18:	4607      	mov	r7, r0
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	b921      	cbnz	r1, 8005b2a <_realloc_r+0x16>
 8005b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b24:	4611      	mov	r1, r2
 8005b26:	f7ff b9db 	b.w	8004ee0 <_malloc_r>
 8005b2a:	b92a      	cbnz	r2, 8005b38 <_realloc_r+0x24>
 8005b2c:	f7ff f96c 	bl	8004e08 <_free_r>
 8005b30:	4625      	mov	r5, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	f000 f81a 	bl	8005b70 <_malloc_usable_size_r>
 8005b3c:	4284      	cmp	r4, r0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	d802      	bhi.n	8005b48 <_realloc_r+0x34>
 8005b42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b46:	d8f4      	bhi.n	8005b32 <_realloc_r+0x1e>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff f9c8 	bl	8004ee0 <_malloc_r>
 8005b50:	4680      	mov	r8, r0
 8005b52:	b908      	cbnz	r0, 8005b58 <_realloc_r+0x44>
 8005b54:	4645      	mov	r5, r8
 8005b56:	e7ec      	b.n	8005b32 <_realloc_r+0x1e>
 8005b58:	42b4      	cmp	r4, r6
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	bf28      	it	cs
 8005b60:	4632      	movcs	r2, r6
 8005b62:	f7ff ffc9 	bl	8005af8 <memcpy>
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff f94d 	bl	8004e08 <_free_r>
 8005b6e:	e7f1      	b.n	8005b54 <_realloc_r+0x40>

08005b70 <_malloc_usable_size_r>:
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f18      	subs	r0, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfbc      	itt	lt
 8005b7a:	580b      	ldrlt	r3, [r1, r0]
 8005b7c:	18c0      	addlt	r0, r0, r3
 8005b7e:	4770      	bx	lr

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
